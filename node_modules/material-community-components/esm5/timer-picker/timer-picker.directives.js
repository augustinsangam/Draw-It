import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, forwardRef, Input, Output, Renderer2, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MccTimerPickerComponent } from './timer-picker.component';
import { BehaviorSubject } from 'rxjs';
var MccTimerPickerOriginDirective = /** @class */ (function () {
    /**
     * Reference to the element on which the directive is applied.
     */
    function MccTimerPickerOriginDirective(elementRef, renderer) {
        var _this = this;
        this.elementRef = elementRef;
        this.renderer = renderer;
        /**
         * Emit changes from the origin
         */
        this.change = new BehaviorSubject('');
        /**
         * Emit changes from the origin
         */
        this.hasFocus = new BehaviorSubject(false);
        // listen focus
        renderer.listen(elementRef.nativeElement, 'focus', function () { return _this.hasFocus.next(true); });
    }
    MccTimerPickerOriginDirective_1 = MccTimerPickerOriginDirective;
    /**
     * This method will be called by the forms API to write to the view when
     * programmatic (model -> view) changes are requested.
     */
    MccTimerPickerOriginDirective.prototype.writeValue = function (time) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', time);
        this.change.next(time);
        if (this.propagateChanges) {
            this.propagateChanges(time);
        }
    };
    /**
     * This method will be called by the time picker
     */
    MccTimerPickerOriginDirective.prototype.writeValueFromTimerPicker = function (time) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', time);
        this.propagateChanges(time);
    };
    /**
     * This method will be called from origin whe key is up
     */
    MccTimerPickerOriginDirective.prototype.writeValueFromKeyup = function (time) {
        this.change.next(time);
        this.propagateChanges(time);
    };
    /**
     * This is called by the forms API on initialization so it can update the
     * form model when values propagate from the view (view -> model).
     * @param fn any
     */
    MccTimerPickerOriginDirective.prototype.registerOnChange = function (fn) {
        this.propagateChanges = fn;
    };
    /**
     * This is called by the forms API on initialization so it can update the form model on blur
     * @param fn any
     */
    MccTimerPickerOriginDirective.prototype.registerOnTouched = function (fn) { };
    /**
     * called by the forms API when the control status changes to or from "DISABLED"
     * @param isDisabled boolean
     */
    MccTimerPickerOriginDirective.prototype.setDisabledState = function (isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    };
    var MccTimerPickerOriginDirective_1;
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", BehaviorSubject)
    ], MccTimerPickerOriginDirective.prototype, "change", void 0);
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", BehaviorSubject)
    ], MccTimerPickerOriginDirective.prototype, "hasFocus", void 0);
    MccTimerPickerOriginDirective = MccTimerPickerOriginDirective_1 = tslib_1.__decorate([
        Directive({
            selector: '[mccTimerPickerOrigin], [mcc-timer-picker-origin]',
            exportAs: 'mccTimerPickerOrigin',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MccTimerPickerOriginDirective_1; }),
                    multi: true,
                },
            ],
        }),
        tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
    ], MccTimerPickerOriginDirective);
    return MccTimerPickerOriginDirective;
}());
export { MccTimerPickerOriginDirective };
var MccConnectedTimerPickerDirective = /** @class */ (function () {
    function MccConnectedTimerPickerDirective(timerPicker, changeDetectorRef) {
        this.timerPicker = timerPicker;
        this.changeDetectorRef = changeDetectorRef;
        this.timerPicker.connected = true;
    }
    MccConnectedTimerPickerDirective.prototype.ngAfterViewInit = function () {
        if (!this._timerPickerSub) {
            this.timerPicker.trigger = this.origin;
            this._attachTimerPicker();
        }
    };
    MccConnectedTimerPickerDirective.prototype.ngOnDestroy = function () {
        if (this._originFocus && !this._originFocus.closed) {
            this._originFocus.unsubscribe();
        }
        if (this._timerPickerSub && !this._timerPickerSub.closed) {
            this._timerPickerSub.unsubscribe();
        }
    };
    /**
     * Attach the timer picker to origin element (input)
     */
    MccConnectedTimerPickerDirective.prototype._attachTimerPicker = function () {
        var _this = this;
        this._originFocus = this.origin.hasFocus.subscribe(function (focused) {
            _this.timerPicker.focus = 'hour';
            _this.timerPicker.isOpen = focused;
            _this.changeDetectorRef.detectChanges();
        });
        this._timerPickerSub = this.timerPicker.selected.subscribe(function (value) {
            return _this.origin.writeValueFromTimerPicker(value);
        });
    };
    tslib_1.__decorate([
        Input('mccConnectedTimerPickerOrigin'),
        tslib_1.__metadata("design:type", MccTimerPickerOriginDirective)
    ], MccConnectedTimerPickerDirective.prototype, "origin", void 0);
    MccConnectedTimerPickerDirective = tslib_1.__decorate([
        Directive({
            selector: '[mccConnectedTimerPicker], [mcc-connected-timer-picker]',
            exportAs: 'mccConnectedTimerPicker',
        }),
        tslib_1.__metadata("design:paramtypes", [MccTimerPickerComponent,
            ChangeDetectorRef])
    ], MccConnectedTimerPickerDirective);
    return MccConnectedTimerPickerDirective;
}());
export { MccConnectedTimerPickerDirective };
//# sourceMappingURL=data:application/json;base64,