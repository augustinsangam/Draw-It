import * as tslib_1 from "tslib";
import { Component, ContentChildren, Input, QueryList, Renderer2, ViewEncapsulation } from '@angular/core';
import { MatButton } from '@angular/material';
import { BehaviorSubject } from 'rxjs';
import { Z_INDEX } from './animations';
var MccSpeedDialActionsComponent = /** @class */ (function () {
    function MccSpeedDialActionsComponent(renderer) {
        this.renderer = renderer;
        this._animation = new BehaviorSubject('scale');
    }
    Object.defineProperty(MccSpeedDialActionsComponent.prototype, "animation", {
        /**
         * Set type of animation will be executed on open/close
         * Type available are: scale | fling
         */
        set: function (animation) {
            this._animation.next(animation);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * The z-index style and animation class are handle separate because
     * z-index will be set only one time, and the animation class will be set
     * every time the animation change
     */
    MccSpeedDialActionsComponent.prototype.ngAfterContentInit = function () {
        var _this = this;
        // set z-index style to each button action
        this._buttons.forEach(function (button, index) {
            _this.renderer.setStyle(button._elementRef.nativeElement, 'z-index', (Z_INDEX - index));
        });
        // set the animation class to each button action
        this._animation.subscribe(function (animation) {
            var nextAnimationClass = "speed-dial-item-animation-" + animation;
            _this._buttons.forEach(function (button) {
                if (_this._lastAnimationClass) {
                    _this.renderer.removeClass(button._elementRef.nativeElement, _this._lastAnimationClass);
                }
                _this.renderer.addClass(button._elementRef.nativeElement, nextAnimationClass);
            });
            _this._lastAnimationClass = nextAnimationClass;
        });
    };
    /**
     * Responsible for change the state of the action buttons to visible
     *
     * @param direction DIRECTION
     */
    MccSpeedDialActionsComponent.prototype.show = function (direction) {
        var _this = this;
        switch (this._animation.value) {
            case 'scale': {
                this._buttons.forEach(function (button, index) {
                    var transition = 3 + (65 * index);
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', transition + "ms");
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(1)');
                });
                break;
            }
            case 'fling': {
                var translateFn_1 = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';
                var sign_1 = (direction == 'down' || direction == 'right') ? '-' : '';
                this._buttons.forEach(function (button) {
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'transform', translateFn_1 + "(" + sign_1 + "0)");
                });
            }
        }
    };
    /**
     * Hide all the buttons action
     *
     * @param direction DIRECTION
     */
    MccSpeedDialActionsComponent.prototype.hide = function (direction) {
        var _this = this;
        switch (this._animation.value) {
            case 'scale': {
                this._buttons.forEach(function (button, index) {
                    var transition = 3 - (65 * index);
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', transition + "ms");
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '0');
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(0)');
                });
                break;
            }
            case 'fling': {
                var translateFn_2 = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';
                var sign_2 = (direction == 'down' || direction == 'right') ? '-' : '';
                this._buttons.forEach(function (button, index) {
                    var transform = (55 * (index + 1) - (index * 5));
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');
                    _this.renderer.setStyle(button._elementRef.nativeElement, 'transform', translateFn_2 + "(" + sign_2 + transform + "px)");
                });
            }
        }
    };
    tslib_1.__decorate([
        ContentChildren(MatButton),
        tslib_1.__metadata("design:type", QueryList)
    ], MccSpeedDialActionsComponent.prototype, "_buttons", void 0);
    tslib_1.__decorate([
        Input(),
        tslib_1.__metadata("design:type", String),
        tslib_1.__metadata("design:paramtypes", [String])
    ], MccSpeedDialActionsComponent.prototype, "animation", null);
    MccSpeedDialActionsComponent = tslib_1.__decorate([
        Component({
            selector: 'mcc-speed-dial-actions',
            template: "<ng-content select=\"button\"></ng-content>",
            encapsulation: ViewEncapsulation.None,
            styles: ["mcc-speed-dial-actions .speed-dial-item-animation-scale{transform:scale(0);transition:.3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}mcc-speed-dial-actions .speed-dial-item-animation-fling{display:block;opacity:1;transition:.3s cubic-bezier(.55,0,.55,.2)}"]
        }),
        tslib_1.__metadata("design:paramtypes", [Renderer2])
    ], MccSpeedDialActionsComponent);
    return MccSpeedDialActionsComponent;
}());
export { MccSpeedDialActionsComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtZGlhbC1hY3Rpb25zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsLWNvbW11bml0eS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsic3BlZWQtZGlhbC9zcGVlZC1kaWFsLWFjdGlvbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQW9CLFNBQVMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0gsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzlDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFhLE9BQU8sRUFBRSxNQUFNLGNBQWMsQ0FBQztBQVNsRDtJQW9CRSxzQ0FBb0IsUUFBbUI7UUFBbkIsYUFBUSxHQUFSLFFBQVEsQ0FBVztRQVAvQixlQUFVLEdBQStCLElBQUksZUFBZSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBT25DLENBQUM7SUFWbkMsc0JBQUksbURBQVM7UUFKdEI7OztXQUdHO2FBQ00sVUFBYyxTQUFvQjtZQUN6QyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNsQyxDQUFDOzs7T0FBQTtJQVVEOzs7O09BSUc7SUFDSCx5REFBa0IsR0FBbEI7UUFBQSxpQkFrQkM7UUFqQkMsMENBQTBDO1FBQzFDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQUMsTUFBTSxFQUFFLEtBQUs7WUFDbEMsS0FBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFDekYsQ0FBQyxDQUFDLENBQUM7UUFFSCxnREFBZ0Q7UUFDaEQsSUFBSSxDQUFD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QyxRQUFRLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLEVBQUUsU0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO29CQUN6RSxLQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxXQUFXLEVBQUssYUFBVyxTQUFJLE1BQUksR0FBRyxTQUFTLFFBQUssQ0FBQyxDQUFDO2dCQUNqSCxDQUFDLENBQUMsQ0FBQzthQUNKO1NBQ0Y7SUFDSCxDQUFDO0lBekcyQjtRQUEzQixlQUFlLENBQUMsU0FBUyxDQUFDOzBDQUFXLFNBQVM7a0VBQVk7SUFNbEQ7UUFBUixLQUFLLEVBQUU7OztpRUFFUDtJQVpVLDRCQUE0QjtRQU54QyxTQUFTLENBQUM7WUFDVCxRQUFRLEVBQUUsd0JBQXdCO1lBQ2xDLHVEQUFrRDtZQUVsRCxhQUFhLEVBQUUsaUJBQWlCLENBQUMsSUFBSTs7U0FDdEMsQ0FBQztpREFxQjhCLFNBQVM7T0FwQjVCLDRCQUE0QixDQThHeEM7SUFBRCxtQ0FBQztDQUFBLEFBOUdELElBOEdDO1NBOUdZLDRCQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkcmVuLCBJbnB1dCwgUXVlcnlMaXN0LCBSZW5kZXJlcjIsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNYXRCdXR0b24gfSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFOSU1BVElPTiwgWl9JTkRFWCB9IGZyb20gJy4vYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBESVJFQ1RJT04gfSBmcm9tICcuL2RpcmVjdGlvbnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtY2Mtc3BlZWQtZGlhbC1hY3Rpb25zJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3NwZWVkLWRpYWwtYWN0aW9ucy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3NwZWVkLWRpYWwtYWN0aW9ucy5jb21wb25lbnQuc2NzcyddLFxuICBlbmNhcHN1bGF0aW9uOiBWaWV3RW5jYXBzdWxhdGlvbi5Ob25lXG59KVxuZXhwb3J0IGNsYXNzIE1jY1NwZWVkRGlhbEFjdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgLyoqXG4gICAqIEhvbGQgYWxsIHRoZSBhY3Rpb25zIGJ1dHRvbiBpbnNpZGUgZmFiIHNwZWVkIGRpYWxcbiAgICovXG4gIEBDb250ZW50Q2hpbGRyZW4oTWF0QnV0dG9uKSBfYnV0dG9uczogUXVlcnlMaXN0PE1hdEJ1dHRvbj47XG5cbiAgLyoqXG4gICAqIFNldCB0eXBlIG9mIGFuaW1hdGlvbiB3aWxsIGJlIGV4ZWN1dGVkIG9uIG9wZW4vY2xvc2VcbiAgICogVHlwZSBhdmFpbGFibGUgYXJlOiBzY2FsZSB8IGZsaW5nXG4gICAqL1xuICBASW5wdXQoKSBzZXQgYW5pbWF0aW9uKGFuaW1hdGlvbjogQU5JTUFUSU9OKSB7XG4gICAgdGhpcy5fYW5pbWF0aW9uLm5leHQoYW5pbWF0aW9uKTtcbiAgfVxuICBwcml2YXRlIF9hbmltYXRpb246IEJlaGF2aW9yU3ViamVjdDxBTklNQVRJT04+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCgnc2NhbGUnKTtcblxuICAvKipcbiAgICogTGFzdCBhbmltYXRpb24gdGhlIHdhcyB1c2VkXG4gICAqL1xuICBwcml2YXRlIF9sYXN0QW5pbWF0aW9uQ2xhc3M6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxuXG4gIC8qKlxuICAgKiBUaGUgei1pbmRleCBzdHlsZSBhbmQgYW5pbWF0aW9uIGNsYXNzIGFyZSBoYW5kbGUgc2VwYXJhdGUgYmVjYXVzZVxuICAgKiB6LWluZGV4IHdpbGwgYmUgc2V0IG9ubHkgb25lIHRpbWUsIGFuZCB0aGUgYW5pbWF0aW9uIGNsYXNzIHdpbGwgYmUgc2V0XG4gICAqIGV2ZXJ5IHRpbWUgdGhlIGFuaW1hdGlvbiBjaGFuZ2VcbiAgICovXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAvLyBzZXQgei1pbmRleCBzdHlsZSB0byBlYWNoIGJ1dHRvbiBhY3Rpb25cbiAgICB0aGlzLl9idXR0b25zLmZvckVhY2goKGJ1dHRvbiwgaW5kZXgpID0+IHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoYnV0dG9uLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd6LWluZGV4JywgKFpfSU5ERVggLSBpbmRleCkpO1xuICAgIH0pO1xuXG4gICAgLy8gc2V0IHRoZSBhbmltYXRpb24gY2xhc3MgdG8gZWFjaCBidXR0b24gYWN0aW9uXG4gICAgdGhpcy5fYW5pbWF0aW9uLnN1YnNjcmliZShhbmltYXRpb24gPT4ge1xuICAgICAgY29uc3QgbmV4dEFuaW1hdGlvbkNsYXNzID0gYHNwZWVkLWRpYWwtaXRlbS1hbmltYXRpb24tJHthbmltYXRpb259YDtcbiAgICAgIHRoaXMuX2J1dHRvbnMuZm9yRWFjaChidXR0b24gPT4ge1xuICAgICAgICBpZiAodGhpcy5fbGFzdEFuaW1hdGlvbkNsYXNzKSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyhidXR0b24uX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgdGhpcy5fbGFzdEFuaW1hdGlvbkNsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGJ1dHRvbi5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCBuZXh0QW5pbWF0aW9uQ2xhc3MpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuX2xhc3RBbmltYXRpb25DbGFzcyA9IG5leHRBbmltYXRpb25DbGFzcztcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNwb25zaWJsZSBmb3IgY2hhbmdlIHRoZSBzdGF0ZSBvZiB0aGUgYWN0aW9uIGJ1dHRvbnMgdG8gdmlzaWJsZVxuICAgKiBcbiAgICogQHBhcmFtIGRpcmVjdGlvbiBESVJFQ1RJT05cbiAgICovXG4gIHNob3coZGlyZWN0aW9uOiBESVJFQ1RJT04pIHtcbiAgICBzd2l0Y2ggKHRoaXMuX2FuaW1hdGlvbi52YWx1ZSkge1xuICAgICAgY2FzZSAnc2NhbGUnOiB7XG4gICAgICAgIHRoaXMuX2J1dHRvbnMuZm9yRWFjaCgoYnV0dG9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb24gPSAzICsgKDY1ICogaW5kZXgpO1xuXG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShidXR0b24uX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3RyYW5zaXRpb24tZGVsYXknLCBgJHt0cmFuc2l0aW9ufW1zYCk7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShidXR0b24uX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ29wYWNpdHknLCAnMScpO1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoYnV0dG9uLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd0cmFuc2Zvcm0nLCAnc2NhbGUoMSknKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdmbGluZyc6IHtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlRm4gPSAoZGlyZWN0aW9uID09ICd1cCcgfHwgZGlyZWN0aW9uID09ICdkb3duJykgPyAndHJhbnNsYXRlWScgOiAndHJhbnNsYXRlWCc7XG4gICAgICAgIGNvbnN0IHNpZ24gPSAoZGlyZWN0aW9uID09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT0gJ3JpZ2h0JykgPyAnLScgOiAnJztcblxuICAgICAgICB0aGlzLl9idXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGJ1dHRvbi5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndHJhbnNpdGlvbi1kZWxheScsICcwbXMnKTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGJ1dHRvbi5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnb3BhY2l0eScsICcxJyk7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShidXR0b24uX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3RyYW5zZm9ybScsIGAke3RyYW5zbGF0ZUZufSgke3NpZ259MClgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhpZGUgYWxsIHRoZSBidXR0b25zIGFjdGlvblxuICAgKiBcbiAgICogQHBhcmFtIGRpcmVjdGlvbiBESVJFQ1RJT05cbiAgICovXG4gIGhpZGUoZGlyZWN0aW9uOiBESVJFQ1RJT04pIHtcbiAgICBzd2l0Y2ggKHRoaXMuX2FuaW1hdGlvbi52YWx1ZSkge1xuICAgICAgY2FzZSAnc2NhbGUnOiB7XG4gICAgICAgIHRoaXMuX2J1dHRvbnMuZm9yRWFjaCgoYnV0dG9uLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRyYW5zaXRpb24gPSAzIC0gKDY1ICogaW5kZXgpO1xuXG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShidXR0b24uX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3RyYW5zaXRpb24tZGVsYXknLCBgJHt0cmFuc2l0aW9ufW1zYCk7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShidXR0b24uX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ29wYWNpdHknLCAnMCcpO1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoYnV0dG9uLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd0cmFuc2Zvcm0nLCAnc2NhbGUoMCknKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuXG4gICAgICBjYXNlICdmbGluZyc6IHtcbiAgICAgICAgY29uc3QgdHJhbnNsYXRlRm4gPSAoZGlyZWN0aW9uID09ICd1cCcgfHwgZGlyZWN0aW9uID09ICdkb3duJykgPyAndHJhbnNsYXRlWScgOiAndHJhbnNsYXRlWCc7XG4gICAgICAgIGNvbnN0IHNpZ24gPSAoZGlyZWN0aW9uID09ICdkb3duJyB8fCBkaXJlY3Rpb24gPT0gJ3JpZ2h0JykgPyAnLScgOiAnJztcblxuICAgICAgICB0aGlzLl9idXR0b25zLmZvckVhY2goKGJ1dHRvbiwgaW5kZXgpID0+IHtcbiAgICAgICAgICBjb25zdCB0cmFuc2Zvcm0gPSAoNTUgKiAoaW5kZXggKyAxKSAtIChpbmRleCAqIDUpKTtcblxuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoYnV0dG9uLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd0cmFuc2l0aW9uLWRlbGF5JywgJzBtcycpO1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUoYnV0dG9uLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdvcGFjaXR5JywgJzEnKTtcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKGJ1dHRvbi5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndHJhbnNmb3JtJywgYCR7dHJhbnNsYXRlRm59KCR7c2lnbn0ke3RyYW5zZm9ybX1weClgKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=