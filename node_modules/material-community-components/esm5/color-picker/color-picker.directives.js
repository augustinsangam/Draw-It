import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Directive, ElementRef, forwardRef, Input, Inject, Output, Renderer2, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { MccColorPickerComponent } from './color-picker.component';
import { EMPTY_COLOR, coerceHexaColor, isValidColor } from './color-picker';
import { BehaviorSubject } from 'rxjs';
/**
 * This directive change the background of the button
 */
var MccColorPickerOptionDirective = /** @class */ (function () {
    function MccColorPickerOptionDirective(elementRef, render, emptyColor) {
        this.elementRef = elementRef;
        this.render = render;
        this.emptyColor = emptyColor;
        this._color = emptyColor;
    }
    Object.defineProperty(MccColorPickerOptionDirective.prototype, "color", {
        /**
         * Receive the color
         */
        get: function () {
            return this._color;
        },
        set: function (value) {
            this._color = value;
        },
        enumerable: true,
        configurable: true
    });
    MccColorPickerOptionDirective.prototype.ngAfterViewInit = function () {
        if (this.color) {
            var color = void 0;
            if (typeof this.color === 'string') {
                color = this.color;
            }
            else {
                color = this.color.value;
                this.render.setAttribute(this.elementRef.nativeElement, 'aria-label', this.color.text);
            }
            if (isValidColor(color)) {
                // apply the color
                this.render.setStyle(this.elementRef.nativeElement, 'background', coerceHexaColor(color) || this.emptyColor);
            }
        }
    };
    tslib_1.__decorate([
        Input('mccColorPickerOption'),
        tslib_1.__metadata("design:type", Object),
        tslib_1.__metadata("design:paramtypes", [Object])
    ], MccColorPickerOptionDirective.prototype, "color", null);
    MccColorPickerOptionDirective = tslib_1.__decorate([
        Directive({
            selector: '[mccColorPickerOption], [mcc-color-picker-option]',
            exportAs: 'mccColorPickerOption',
        }),
        tslib_1.__param(2, Inject(EMPTY_COLOR)),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2, String])
    ], MccColorPickerOptionDirective);
    return MccColorPickerOptionDirective;
}());
export { MccColorPickerOptionDirective };
/**
 * Directive applied to an element to make it usable as an origin for an ColorPicker.
 */
var MccColorPickerOriginDirective = /** @class */ (function () {
    /**
     * Reference to the element on which the directive is applied.
     */
    function MccColorPickerOriginDirective(elementRef, renderer, emptyColor) {
        var _this = this;
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.emptyColor = emptyColor;
        /**
         * Emit changes from the origin
         */
        this.change = new BehaviorSubject('');
        // listen changes onkeyup and update color picker
        renderer.listen(elementRef.nativeElement, 'keyup', function (event) {
            var value = event.currentTarget['value'];
            if (event.isTrusted && isValidColor(value)) {
                _this.writeValueFromKeyup(coerceHexaColor(value) || _this.emptyColor);
            }
        });
    }
    MccColorPickerOriginDirective_1 = MccColorPickerOriginDirective;
    /**
     * This method will be called by the forms API to write to the view when
     * programmatic (model -> view) changes are requested.
     */
    MccColorPickerOriginDirective.prototype.writeValue = function (color) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', color);
        this.change.next(color);
        if (this.propagateChanges) {
            this.propagateChanges(color);
        }
    };
    /**
     * This method will be called by the color picker
     */
    MccColorPickerOriginDirective.prototype.writeValueFromColorPicker = function (color) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'value', color);
        this.propagateChanges(color);
    };
    /**
     * This method will be called from origin whe key is up
     */
    MccColorPickerOriginDirective.prototype.writeValueFromKeyup = function (color) {
        this.change.next(color);
        this.propagateChanges(color);
    };
    /**
     * This is called by the forms API on initialization so it can update the
     * form model when values propagate from the view (view -> model).
     * @param fn any
     */
    MccColorPickerOriginDirective.prototype.registerOnChange = function (fn) {
        this.propagateChanges = fn;
    };
    /**
     * This is called by the forms API on initialization so it can update the form model on blur
     * @param fn any
     */
    MccColorPickerOriginDirective.prototype.registerOnTouched = function (fn) { };
    /**
     * called by the forms API when the control status changes to or from "DISABLED"
     * @param isDisabled boolean
     */
    MccColorPickerOriginDirective.prototype.setDisabledState = function (isDisabled) {
        this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);
    };
    var MccColorPickerOriginDirective_1;
    tslib_1.__decorate([
        Output(),
        tslib_1.__metadata("design:type", BehaviorSubject)
    ], MccColorPickerOriginDirective.prototype, "change", void 0);
    MccColorPickerOriginDirective = MccColorPickerOriginDirective_1 = tslib_1.__decorate([
        Directive({
            selector: '[mcc-color-picker-origin], [mccColorPickerOrigin]',
            exportAs: 'mccColorPickerOrigin',
            providers: [
                {
                    provide: NG_VALUE_ACCESSOR,
                    useExisting: forwardRef(function () { return MccColorPickerOriginDirective_1; }),
                    multi: true,
                },
            ],
        }),
        tslib_1.__param(2, Inject(EMPTY_COLOR)),
        tslib_1.__metadata("design:paramtypes", [ElementRef,
            Renderer2, String])
    ], MccColorPickerOriginDirective);
    return MccColorPickerOriginDirective;
}());
export { MccColorPickerOriginDirective };
/**
 * Directive connect an color picker with any input, select or textarea.
 * The color picker will be automatically updated when the value of the origin is
 * changed.
 */
var MccConnectedColorPickerDirective = /** @class */ (function () {
    function MccConnectedColorPickerDirective(colorPicker, changeDetectorRef, emptyColor) {
        this.colorPicker = colorPicker;
        this.changeDetectorRef = changeDetectorRef;
        this.emptyColor = emptyColor;
    }
    MccConnectedColorPickerDirective.prototype.ngAfterViewInit = function () {
        if (!this._colorPickerSub) {
            this._attachColorPicker();
        }
    };
    MccConnectedColorPickerDirective.prototype.ngOnDestroy = function () {
        if (this._colorPickerSub && !this._colorPickerSub.closed) {
            this._colorPickerSub.unsubscribe();
        }
        if (this._originSub && !this._originSub.closed) {
            this._originSub.unsubscribe();
        }
    };
    /**
     * Attach color picker and origin
     */
    MccConnectedColorPickerDirective.prototype._attachColorPicker = function () {
        var _this = this;
        // subscribe to origin change to update color picker
        this._originSub = this.origin.change.subscribe(function (value) {
            if (isValidColor(value) ||
                (value === _this.emptyColor && _this.colorPicker.selectedColor !== _this.emptyColor)) {
                _this.colorPicker.updateTmpSelectedColor(value);
            }
            _this.colorPicker.selectedColor = value;
            _this.changeDetectorRef.detectChanges();
        });
        // subscribe to color picker changes and set on origin element
        this._colorPickerSub = this.colorPicker.change.subscribe(function (value) {
            return _this.origin.writeValueFromColorPicker(value);
        });
    };
    tslib_1.__decorate([
        Input('mccConnectedColorPickerOrigin'),
        tslib_1.__metadata("design:type", MccColorPickerOriginDirective)
    ], MccConnectedColorPickerDirective.prototype, "origin", void 0);
    MccConnectedColorPickerDirective = tslib_1.__decorate([
        Directive({
            selector: '[mcc-connected-color-picker], [mccConnectedColorPicker]',
            exportAs: 'mccConnectedColorPicker',
        }),
        tslib_1.__param(2, Inject(EMPTY_COLOR)),
        tslib_1.__metadata("design:paramtypes", [MccColorPickerComponent,
            ChangeDetectorRef, String])
    ], MccConnectedColorPickerDirective);
    return MccConnectedColorPickerDirective;
}());
export { MccConnectedColorPickerDirective };
//# sourceMappingURL=data:application/json;base64,