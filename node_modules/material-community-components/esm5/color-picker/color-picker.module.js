import * as tslib_1 from "tslib";
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { MatButtonModule, MatFormFieldModule, MatInputModule } from '@angular/material';
import { EMPTY_COLOR, USED_COLORS } from './color-picker';
import { MccColorPickerService } from './color-picker.service';
import { MccColorPickerComponent } from './color-picker.component';
import { MccColorPickerSelectorComponent } from './color-picker-selector.component';
import { MccColorPickerCollectionComponent } from './color-picker-collection.component';
import { MccConnectedColorPickerDirective, MccColorPickerOriginDirective, MccColorPickerOptionDirective, } from './color-picker.directives';
var ɵ0 = [];
var MccColorPickerModule = /** @class */ (function () {
    function MccColorPickerModule() {
    }
    MccColorPickerModule_1 = MccColorPickerModule;
    /**
     *
     */
    MccColorPickerModule.forRoot = function (config) {
        return {
            ngModule: MccColorPickerModule_1,
            providers: [
                { provide: EMPTY_COLOR, useValue: config.empty_color || 'none' },
                { provide: USED_COLORS, useValue: config.used_colors || [] }
            ],
        };
    };
    var MccColorPickerModule_1;
    MccColorPickerModule = MccColorPickerModule_1 = tslib_1.__decorate([
        NgModule({
            imports: [
                CommonModule,
                PortalModule,
                OverlayModule,
                ReactiveFormsModule,
                MatButtonModule,
                MatFormFieldModule,
                MatInputModule,
            ],
            declarations: [
                MccColorPickerComponent,
                MccConnectedColorPickerDirective,
                MccColorPickerSelectorComponent,
                MccColorPickerOriginDirective,
                MccColorPickerOptionDirective,
                MccColorPickerCollectionComponent,
            ],
            exports: [
                MccColorPickerComponent,
                MccConnectedColorPickerDirective,
                MccColorPickerOriginDirective,
                MccColorPickerCollectionComponent,
            ],
            providers: [
                MccColorPickerService,
                { provide: EMPTY_COLOR, useValue: 'none' },
                { provide: USED_COLORS, useValue: ɵ0 }
            ],
        })
    ], MccColorPickerModule);
    return MccColorPickerModule;
}());
export { MccColorPickerModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcGlja2VyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsLWNvbW11bml0eS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29sb3ItcGlja2VyL2NvbG9yLXBpY2tlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzlELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDckQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxlQUFlLEVBQUUsa0JBQWtCLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFeEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQXFCLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFL0QsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDbkUsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDcEYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDeEYsT0FBTyxFQUNMLGdDQUFnQyxFQUNoQyw2QkFBNkIsRUFDN0IsNkJBQTZCLEdBQzlCLE1BQU0sMkJBQTJCLENBQUM7U0E2QkcsRUFBRTtBQUd4QztJQUFBO0lBYUEsQ0FBQzs2QkFiWSxvQkFBb0I7SUFDL0I7O09BRUc7SUFDSSw0QkFBTyxHQUFkLFVBQWUsTUFBeUI7UUFDdEMsT0FBTztZQUNMLFFBQVEsRUFBRSxzQkFBb0I7WUFDOUIsU0FBUyxFQUFFO2dCQUNULEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLFdBQVcsSUFBSSxNQUFNLEVBQUU7Z0JBQ2hFLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLFdBQVcsSUFBSSxFQUFFLEVBQUU7YUFDN0Q7U0FDRixDQUFDO0lBQ0osQ0FBQzs7SUFaVSxvQkFBb0I7UUE5QmhDLFFBQVEsQ0FBQztZQUNSLE9BQU8sRUFBRTtnQkFDUCxZQUFZO2dCQUNaLFlBQVk7Z0JBQ1osYUFBYTtnQkFDYixtQkFBbUI7Z0JBQ25CLGVBQWU7Z0JBQ2Ysa0JBQWtCO2dCQUNsQixjQUFjO2FBQ2Y7WUFDRCxZQUFZLEVBQUU7Z0JBQ1osdUJBQXVCO2dCQUN2QixnQ0FBZ0M7Z0JBQ2hDLCtCQUErQjtnQkFDL0IsNkJBQTZCO2dCQUM3Qiw2QkFBNkI7Z0JBQzdCLGlDQUFpQzthQUNsQztZQUNELE9BQU8sRUFBRTtnQkFDUCx1QkFBdUI7Z0JBQ3ZCLGdDQUFnQztnQkFDaEMsNkJBQTZCO2dCQUM3QixpQ0FBaUM7YUFDbEM7WUFDRCxTQUFTLEVBQUU7Z0JBQ1QscUJBQXFCO2dCQUNyQixFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRTtnQkFDMUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsSUFBSSxFQUFFO2FBQ3ZDO1NBQ0YsQ0FBQztPQUNXLG9CQUFvQixDQWFoQztJQUFELDJCQUFDO0NBQUEsQUFiRCxJQWFDO1NBYlksb0JBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIE1vZHVsZVdpdGhQcm92aWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHsgT3ZlcmxheU1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IFBvcnRhbE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wb3J0YWwnO1xuaW1wb3J0IHsgTWF0QnV0dG9uTW9kdWxlLCBNYXRGb3JtRmllbGRNb2R1bGUsIE1hdElucHV0TW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvbWF0ZXJpYWwnO1xuXG5pbXBvcnQgeyBFTVBUWV9DT0xPUiwgVVNFRF9DT0xPUlMsIENvbG9yUGlja2VyQ29uZmlnIH0gZnJvbSAnLi9jb2xvci1waWNrZXInO1xuXG5pbXBvcnQgeyBNY2NDb2xvclBpY2tlclNlcnZpY2UgfSBmcm9tICcuL2NvbG9yLXBpY2tlci5zZXJ2aWNlJztcblxuaW1wb3J0IHsgTWNjQ29sb3JQaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL2NvbG9yLXBpY2tlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTWNjQ29sb3JQaWNrZXJTZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4vY29sb3ItcGlja2VyLXNlbGVjdG9yLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNY2NDb2xvclBpY2tlckNvbGxlY3Rpb25Db21wb25lbnQgfSBmcm9tICcuL2NvbG9yLXBpY2tlci1jb2xsZWN0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQge1xuICBNY2NDb25uZWN0ZWRDb2xvclBpY2tlckRpcmVjdGl2ZSxcbiAgTWNjQ29sb3JQaWNrZXJPcmlnaW5EaXJlY3RpdmUsXG4gIE1jY0NvbG9yUGlja2VyT3B0aW9uRGlyZWN0aXZlLFxufSBmcm9tICcuL2NvbG9yLXBpY2tlci5kaXJlY3RpdmVzJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZSxcbiAgICBQb3J0YWxNb2R1bGUsXG4gICAgT3ZlcmxheU1vZHVsZSxcbiAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxuICAgIE1hdEJ1dHRvbk1vZHVsZSxcbiAgICBNYXRGb3JtRmllbGRNb2R1bGUsXG4gICAgTWF0SW5wdXRNb2R1bGUsXG4gIF0sXG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE1jY0NvbG9yUGlja2VyQ29tcG9uZW50LFxuICAgIE1jY0Nvbm5lY3RlZENvbG9yUGlja2VyRGlyZWN0aXZlLFxuICAgIE1jY0NvbG9yUGlja2VyU2VsZWN0b3JDb21wb25lbnQsXG4gICAgTWNjQ29sb3JQaWNrZXJPcmlnaW5EaXJlY3RpdmUsXG4gICAgTWNjQ29sb3JQaWNrZXJPcHRpb25EaXJlY3RpdmUsXG4gICAgTWNjQ29sb3JQaWNrZXJDb2xsZWN0aW9uQ29tcG9uZW50LFxuICBdLFxuICBleHBvcnRzOiBbXG4gICAgTWNjQ29sb3JQaWNrZXJDb21wb25lbnQsXG4gICAgTWNjQ29ubmVjdGVkQ29sb3JQaWNrZXJEaXJlY3RpdmUsXG4gICAgTWNjQ29sb3JQaWNrZXJPcmlnaW5EaXJlY3RpdmUsXG4gICAgTWNjQ29sb3JQaWNrZXJDb2xsZWN0aW9uQ29tcG9uZW50LFxuICBdLFxuICBwcm92aWRlcnM6IFtcbiAgICBNY2NDb2xvclBpY2tlclNlcnZpY2UsXG4gICAgeyBwcm92aWRlOiBFTVBUWV9DT0xPUiwgdXNlVmFsdWU6ICdub25lJyB9LFxuICAgIHsgcHJvdmlkZTogVVNFRF9DT0xPUlMsIHVzZVZhbHVlOiBbXSB9XG4gIF0sXG59KVxuZXhwb3J0IGNsYXNzIE1jY0NvbG9yUGlja2VyTW9kdWxlIHtcbiAgLyoqXG4gICAqXG4gICAqL1xuICBzdGF0aWMgZm9yUm9vdChjb25maWc6IENvbG9yUGlja2VyQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5nTW9kdWxlOiBNY2NDb2xvclBpY2tlck1vZHVsZSxcbiAgICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7IHByb3ZpZGU6IEVNUFRZX0NPTE9SLCB1c2VWYWx1ZTogY29uZmlnLmVtcHR5X2NvbG9yIHx8ICdub25lJyB9LFxuICAgICAgICB7IHByb3ZpZGU6IFVTRURfQ09MT1JTLCB1c2VWYWx1ZTogY29uZmlnLnVzZWRfY29sb3JzIHx8IFtdIH1cbiAgICAgIF0sXG4gICAgfTtcbiAgfVxufVxuIl19