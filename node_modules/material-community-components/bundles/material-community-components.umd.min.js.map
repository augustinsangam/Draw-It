{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://material-community-components/color-picker/color-picker.ts","ng://material-community-components/color-picker/color-picker.service.ts","ng://material-community-components/color-picker/color-picker-collection.component.ts","ng://material-community-components/color-picker/color-picker.component.ts","ng://material-community-components/color-picker/color-picker-selector.component.ts","ng://material-community-components/color-picker/color-picker.directives.ts","ng://material-community-components/color-picker/color-picker.module.ts","ng://material-community-components/scrollspy/scrollspy.service.ts","ng://material-community-components/scrollspy/scrollspy.ts","ng://material-community-components/scrollspy/scrollspy.directives.ts","ng://material-community-components/scrollspy/scrollspy.module.ts","ng://material-community-components/speed-dial/animations.ts","ng://material-community-components/speed-dial/speed-dial-actions.component.ts","ng://material-community-components/speed-dial/speed-dial.component.ts","ng://material-community-components/speed-dial/speed-dial.module.ts","ng://material-community-components/timer-picker/timer-picker.ts","ng://material-community-components/timer-picker/timer-picker.component.ts","ng://material-community-components/timer-picker/timer-picker.directives.ts","ng://material-community-components/timer-picker/timer-picker.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__read","o","n","m","Symbol","iterator","e","call","ar","next","done","push","value","error","EMPTY_COLOR","InjectionToken","USED_COLORS","coerceHexaColor","color","indexOf","isValidColor","toUpperCase","charAt","replace","match","map","v","Number","isNaN","parseInt","MccColorPickerService","emptyColor","usedColors","this","_colors","BehaviorSubject","prototype","addColor","colors","getValue","find","_color","getColors","asObservable","resetUseColors","Injectable","tslib_1.__param","Inject","MccColorPickerCollectionComponent","changeDetectorRef","_hideEmpty","size","transparent","changeColor","EventEmitter","coerceBooleanProperty","_label","values","ngAfterContentChecked","slice","concat","Array","_getCollectionDiffSize","markForCheck","setTransparent","emit","setColor","option","tslib_1.__decorate","Input","Output","Component","selector","template","preserveWhitespaces","changeDetection","ChangeDetectionStrategy","OnPush","ChangeDetectorRef","String","MccColorPickerComponent","elementRef","colorPickerService","_usedColorLabel","_reverseUsedColor","_hideHexForms","_hideTransparent","_hideUsedColors","_isOpen","_overlay","_hideButtons","_colorPickerSelectorHeight","_hideColorPickerSelector","usedSizeColors","btnCancel","btnConfirm","change","selected","clickOut","_collectionSubs","colors_1","tslib_1.__values","colors_1_1","reverse","_selectedColor","height","_tmpSelectedColor","_this","pipe","tslib_1.__spread","ngOnInit","ngAfterContentInit","_collections","forEach","collection","subscription","subscribe","updateTmpSelectedColor","ngOnDestroy","closed","unsubscribe","_updateSelectedColor","overlay","tmpSelectedColor","toggle","backdropClick","confirmSelectedColor","cancelSelection","ContentChildren","QueryList","ElementRef","MccColorPickerSelectorComponent","formBuilder","render","_height","changeSelectedColor","_rgbaColor","textClass","_isPressed","rgbKeys","el","_bc","_sc","_tmpSelectedColorSub","hexForm","get","setValue","hexCode","group","selectedColor","Validators","minLength","maxLength","rgbGroup","rgbValue","_getRGB","index","FormControl","validators","min","max","required","updateOn","rgbForm","_onChanges","ngOnChanges","changes","currentValue","_updateRGB","_updateRGBA","_blockContext","_fillGradient","rgb","Math","round","_hexValuesSub","_rgbValuesSub","ngAfterViewInit","listen","_block","nativeElement","getContext","rect","width","_strip","changeBaseColor","_stripContext","grd1","createLinearGradient","addColorStop","fillStyle","fill","fillRect","grdWhite","grdBlack","valueChanges","controls","data","hex","_getHex","toString","val","R","G","B","setStyle","offsetY","getImageData","offsetX","updateValues","_bp","ViewChild","static","FormBuilder","Renderer2","MccColorPickerOptionDirective","setAttribute","text","Directive","exportAs","MccColorPickerOriginDirective","renderer","event","currentTarget","isTrusted","writeValueFromKeyup","writeValue","setProperty","propagateChanges","writeValueFromColorPicker","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","MccColorPickerOriginDirective_1","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","MccConnectedColorPickerDirective","colorPicker","_colorPickerSub","_attachColorPicker","_originSub","origin","detectChanges","MccColorPickerModule","forRoot","config","ngModule","MccColorPickerModule_1","useValue","empty_color","used_colors","NgModule","imports","CommonModule","PortalModule","OverlayModule","ReactiveFormsModule","MatButtonModule","MatFormFieldModule","MatInputModule","declarations","exports","ɵ0","MccScrollspyService","window","_fromClick","_scrollSub","fromEvent","debounceTime","withLatestFrom","scrollY","position","_updateFocused","items","item","focus","top","create","name","animation","g","scrollTo","id","behavior","MccScrollspyItemDirective","_id","_createId","offsetTop","_focused","focused","label","textContent","toLowerCase","MccScrollspyGroupDirective","mccScrollspyService","_name","MccScrollspyModule","ScrollDispatchModule","ɵ0$1","SPIN_ANIMATION","trigger","state","style","transform","transition","animate","MccSpeedDialActionsComponent","_animation","_buttons","button","_elementRef","nextAnimationClass","_lastAnimationClass","removeClass","addClass","show","direction","translateFn_1","sign_1","hide","translateFn_2","sign_2","MatButton","encapsulation","ViewEncapsulation","None","MccSpeedDialComponent","_hover","_spin","_direction","openStateChange","open","hover","spin","_setActionsState","actions","previousValue","undefined","hoverStart","hoverStop","ContentChild","animations","MccSpeedDialModule","HOURS","MINUTES","MccTimerPickerComponent","_selectedHour","_selectedMinute","_selectedPeriod","_clock","_focus","_hour","_minute","_period","format","connected","getSelectedClass","findIndex","h","hour","minute","select","confirmSelectedTime","parseTimeInput","time","parsed","split","fragment","hours","isOptionDisabled","_a","minHour","minMinutes","minPeriod","_b","maxHour","maxMinutes","maxPeriod","optionValue","selectedHour","selectedPeriod","changePeriod","period","formated","MccTimerPickerOriginDirective","hasFocus","writeValueFromTimerPicker","MccTimerPickerOriginDirective_1","MccConnectedTimerPickerDirective","timerPicker","_timerPickerSub","_attachTimerPicker","_originFocus","isOpen","MccTimerPickerModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { InjectionToken } from '@angular/core';\n\n/** Contant used as empty color */\nexport const EMPTY_COLOR = new InjectionToken<string>('empty-color');\n\n/** Constante to set usedColorStart from the module import */\nexport const USED_COLORS = new InjectionToken<string[]>('used-colors');\n\n/**\n *\n */\nexport interface ColorPickerConfig {\n  empty_color?: string;\n  used_colors?: string[];\n}\n\n/**\n * This interface represents one color. Using this interface instead simple string\n * will help screen readers, because the text attribute ir set to the aria-label of\n * the option\n */\nexport interface MccColorPickerItem {\n  text: string;\n  value: string;\n}\n\nexport type MccColorPickerOption = string | MccColorPickerItem;\n\n/**\n * Verify if color has # as a first char. If not, add this char\n * to the color\n * @param color string\n */\nexport function coerceHexaColor(color: string): string {\n  if (color && color.indexOf('#') !== 0) {\n    color = `#${color}`;\n  }\n\n  if (!isValidColor(color)) {\n    return;\n  }\n\n  return color.toUpperCase();\n}\n\n/**\n * Validate if the color is valid\n * @param color string\n */\nexport function isValidColor(color: string): boolean {\n  // validate if color is an hexadecimal\n  if (\n    !color ||\n    color.charAt(0) !== '#' ||\n    color.length < 4 ||\n    color.length > 7\n  ) {\n    return false;\n  }\n\n  // validate rgb of the color\n  return color.replace('#', '')\n    .match(/.{1,2}/g)\n    .map(v => Number.isNaN(parseInt(v, 16)))\n    .indexOf(true) === -1;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { coerceHexaColor, isValidColor, EMPTY_COLOR, USED_COLORS } from './color-picker';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MccColorPickerService {\n  /**\n   * Array of all used colors\n   */\n  private _colors: BehaviorSubject<string[]> = new BehaviorSubject<string[]>([]);\n\n  constructor(\n    @Inject(EMPTY_COLOR) private emptyColor: string,\n    @Inject(USED_COLORS) private usedColors: string[]\n  ) {\n    this._colors.next(usedColors);\n  }\n\n  /**\n   * Add new color to used colors\n   * @param color string\n   */\n  addColor(color: string): void {\n    if (!color || !isValidColor(color)) {\n      return;\n    }\n\n    color = coerceHexaColor(color) || this.emptyColor;\n\n    const colors = this._colors.getValue();\n    if (!colors.find(_color => _color === color)) {\n      colors.push(color);\n      this._colors.next(colors);\n    }\n  }\n\n  /**\n   * Return Observable of colors\n   */\n  getColors(): Observable<string[]> {\n    return this._colors.asObservable();\n  }\n\n  /**\n   * Reset the array of used colors\n   */\n  resetUseColors(): void {\n    this._colors.next([]);\n  }\n}\n","import {\n  AfterContentChecked,\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  EventEmitter,\n  Input,\n  Inject,\n  Output,\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY_COLOR, MccColorPickerOption } from './color-picker';\n\n@Component({\n  selector: 'mcc-color-picker-collection',\n  templateUrl: './color-picker-collection.component.html',\n  styleUrls: ['./color-picker-collection.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MccColorPickerCollectionComponent implements AfterContentChecked {\n  /**\n   * Hide empty slots\n   * Empty slots are the difference between the collection size and limit\n   */\n  @Input()\n  set hideEmpty(value: boolean) {\n    this._hideEmpty = coerceBooleanProperty(value);\n  }\n  private _hideEmpty: boolean = false;\n\n  /**\n   * Name of the collection\n   */\n  @Input()\n  get label(): string {\n    return this._label;\n  }\n  set label(value: string) {\n    this._label = value;\n  }\n  private _label: string;\n\n  /**\n   * Array of colors to be displayed\n   */\n  @Input()\n  get colors(): MccColorPickerOption[] {\n    return this._colors;\n  }\n  set colors(values: MccColorPickerOption[]) {\n    this._colors = values;\n  }\n  private _colors: MccColorPickerOption[];\n\n  /**\n   * Size limit of the collection\n   */\n  @Input() size: number = 30;\n\n  /**\n   * Show transparent option\n   */\n  @Input() transparent: boolean = false;\n\n  /**\n   * Emit selected color value\n   */\n  @Output() changeColor: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    @Inject(EMPTY_COLOR) public emptyColor: string\n  ) {}\n\n  ngAfterContentChecked() {\n    if (this._colors && this._colors.length !== this.size) {\n      this._colors = this._colors\n        .slice(0, this.size)\n        .concat(new Array(this._getCollectionDiffSize()));\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Return the difference between the limit and the collection size.\n   * Always return 0 when hideEmpty is true\n   * @returns number\n   */\n  private _getCollectionDiffSize(): number {\n    if (this._colors.length > this.size || this._hideEmpty) {\n      return 0;\n    }\n\n    return this.size - this._colors.length;\n  }\n\n  /**\n   * Remove color\n   */\n  setTransparent(): void {\n    this.changeColor.emit(this.emptyColor);\n  }\n\n  /**\n   * Emit selected color value\n   * @param option MccColorPickerOption\n   */\n  setColor(option: MccColorPickerOption) {\n    const color = typeof option === 'string' ? option : option.value;\n    this.changeColor.emit(color);\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EMPTY_COLOR, coerceHexaColor } from './color-picker';\nimport { MccColorPickerCollectionComponent } from './color-picker-collection.component';\nimport { MccColorPickerService } from './color-picker.service';\n\n@Component({\n  selector: 'mcc-color-picker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MccColorPickerComponent implements AfterContentInit, OnInit, OnDestroy {\n  /**\n   * Get all collections\n   */\n  @ContentChildren(MccColorPickerCollectionComponent)\n  _collections: QueryList<MccColorPickerCollectionComponent>;\n\n  /**\n   * Change label of the collection UsedColors\n   */\n  @Input()\n  get usedColorLabel(): string {\n    return this._usedColorLabel;\n  }\n  set usedColorLabel(value: string) {\n    this._usedColorLabel = value;\n  }\n  private _usedColorLabel: string = 'Used Colors';\n\n  /**\n   * Set initial value for used color\n   */\n  @Input()\n  set usedColorStart(colors: string[]) {\n    if (colors && colors.length > 0) {\n      for (const color of colors) {\n        this.colorPickerService.addColor(color);\n      }\n    }\n  }\n\n  /**\n   * Set usedColor to be used in reverse\n   */\n  @Input()\n  set reverseUsedColors(reverse: boolean) {\n    this._reverseUsedColor = coerceBooleanProperty(reverse);\n  }\n  private _reverseUsedColor: boolean = false;\n\n  /**\n   * Hide the hexadecimal color forms.\n   */\n  @Input('hideHexForms')\n  get hideHexForms(): boolean {\n    return this._hideHexForms;\n  }\n  set hideHexForms(value: boolean) {\n    this._hideHexForms = value;\n  }\n  private _hideHexForms: boolean = false;\n\n  /**\n   * Hide empty slots from the collection UsedColors\n   */\n  @Input('hideEmptyUsedColors')\n  get hideEmpty(): boolean {\n    return this._hideEmpty;\n  }\n  set hideEmpty(value: boolean) {\n    this._hideEmpty = coerceBooleanProperty(value);\n  }\n  private _hideEmpty: boolean = false;\n\n  /**\n   * Hide transparent option of UsedColors\n   */\n  @Input('hideTransparentUsedColors')\n  get hideTransparent(): boolean {\n    return this._hideTransparent;\n  }\n  set hideTransparent(value: boolean) {\n    this._hideTransparent = coerceBooleanProperty(value);\n  }\n  private _hideTransparent: boolean = false;\n\n  /**\n   * Hide UsedColors collection\n   */\n  @Input('hideUsedColors')\n  get hideUsedColors(): boolean {\n    return this._hideUsedColors;\n  }\n  set hideUsedColors(value: boolean) {\n    this._hideUsedColors = coerceBooleanProperty(value);\n  }\n  private _hideUsedColors: boolean = false;\n\n  /**\n   * Start with a color selected\n   */\n  @Input()\n  get selectedColor(): string {\n    return this._selectedColor;\n  }\n  set selectedColor(value: string) {\n    if (this._selectedColor !== value) {\n      this.changeDetectorRef.markForCheck();\n    }\n\n    this._selectedColor = coerceHexaColor(value) || this.emptyColor;\n  }\n  private _selectedColor: string;\n\n  /**\n   * Define if the panel will be initiated open\n   */\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n  set isOpen(value: boolean) {\n    this._isOpen = coerceBooleanProperty(value);\n  }\n  private _isOpen: boolean = false;\n\n  /**\n   * Define if the panel will show in overlay or not\n   */\n  @Input()\n  get overlay(): boolean {\n    return this._overlay;\n  }\n  set overlay(value: boolean) {\n    this._overlay = coerceBooleanProperty(value);\n  }\n  private _overlay: boolean = true;\n\n  /**\n   * Hide the action buttons (cancel/confirm)\n   */\n  @Input()\n  get hideButtons(): boolean {\n    return this._hideButtons;\n  }\n  set hideButtons(value: boolean) {\n    this._hideButtons = coerceBooleanProperty(value);\n  }\n  private _hideButtons: boolean = false;\n\n  /**\n   * Define new height for the selector\n   */\n  @Input()\n  get colorPickerSelectorHeight(): number {\n    return this._colorPickerSelectorHeight;\n  }\n  set colorPickerSelectorHeight(height: number) {\n    this._colorPickerSelectorHeight = height;\n  }\n  private _colorPickerSelectorHeight: number = 170;\n\n  /**\n   * Hide the color picker selector\n   */\n  @Input()\n  get hideColorPickerSelector(): boolean {\n    return this._hideColorPickerSelector;\n  }\n  set hideColorPickerSelector(value: boolean) {\n    this._hideColorPickerSelector = coerceBooleanProperty(value);\n  }\n  private _hideColorPickerSelector: boolean = false;\n\n  /**\n   * Set the size of the used colors\n   */\n  @Input() usedSizeColors: number = 30;\n\n  /**\n   * Change btnCancel label\n   */\n  @Input() btnCancel: string = 'Cancel';\n\n  /**\n   * Change btnConfirm label\n   */\n  @Input() btnConfirm: string = 'Confirm';\n\n  /**\n   * Event emitted when user change the selected color (without confirm)\n   */\n  @Output() change = new EventEmitter();\n\n  /**\n   * Event emitted when selected color is confirm\n   */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Event emitted when is clicked outside of the component\n   */\n  @Output() clickOut = new EventEmitter();\n\n  /**\n   * Return a Observable with the color the user is picking\n   */\n  get tmpSelectedColor$(): Observable<string> {\n    return this._tmpSelectedColor.asObservable();\n  }\n  private _tmpSelectedColor: BehaviorSubject<string>;\n\n  /**\n   * Observable with all the colors used by the user\n   */\n  get usedColors$(): Observable<string[]> {\n    return this.colorPickerService\n      .getColors()\n      .pipe(map(colors => (!this._reverseUsedColor ? colors : [...colors].reverse())));\n  }\n\n  /**\n   * Array of subscriptions from the collections\n   */\n  private _collectionSubs: Subscription[] = [];\n\n  constructor(\n    private elementRef: ElementRef,\n    private changeDetectorRef: ChangeDetectorRef,\n    private colorPickerService: MccColorPickerService,\n    @Inject(EMPTY_COLOR) public emptyColor: string\n  ) {}\n\n  ngOnInit() {\n    if (!this._selectedColor) {\n      this._selectedColor = this.emptyColor;\n    }\n\n    this._tmpSelectedColor = new BehaviorSubject<string>(this._selectedColor);\n  }\n\n  /**\n   * Walk throw all collections and subcribe to changes\n   */\n  ngAfterContentInit() {\n    if (this._collections) {\n      this._collections.forEach((collection: MccColorPickerCollectionComponent) => {\n        const subscription = collection.changeColor.subscribe(color => {\n          this.updateTmpSelectedColor(color);\n        });\n\n        this._collectionSubs.push(subscription);\n      });\n    }\n  }\n\n  /**\n   * Destroy all subscriptions\n   */\n  ngOnDestroy() {\n    if (this._collectionSubs) {\n      this._collectionSubs.forEach((subscription: Subscription) => {\n        if (subscription && !subscription.closed) {\n          subscription.unsubscribe();\n        }\n      });\n    }\n  }\n\n  /**\n   * Update selected color and emit the change\n   */\n  private _updateSelectedColor() {\n    if (this._isOpen || !this.overlay) {\n      const tmpSelectedColor = this._tmpSelectedColor.getValue();\n      if (this._selectedColor !== tmpSelectedColor) {\n        this._selectedColor = tmpSelectedColor;\n        this.selected.next(this._selectedColor);\n      } else {\n        this.selected.emit(this._selectedColor);\n      }\n    }\n  }\n\n  /**\n   * Open/close color picker panel\n   */\n  toggle() {\n    this._isOpen = !this._isOpen;\n    if (!this._isOpen && this._selectedColor !== this.emptyColor) {\n      this.colorPickerService.addColor(this._selectedColor);\n    }\n  }\n\n  /**\n   * Update selected color, close the panel and notify the user\n   */\n  backdropClick(): void {\n    if (this._hideButtons) {\n      this.confirmSelectedColor();\n    } else {\n      this.cancelSelection();\n    }\n    this.clickOut.emit(null);\n  }\n\n  /**\n   * Update tmpSelectedColor\n   * @param color string\n   */\n  updateTmpSelectedColor(color: string) {\n    if (color) {\n      this._tmpSelectedColor.next(color);\n      this.change.next(color);\n      if (this._hideButtons) {\n        this._updateSelectedColor();\n      }\n    }\n  }\n\n  /**\n   * Cancel the selection and close the panel\n   */\n  cancelSelection() {\n    this._tmpSelectedColor.next(this._selectedColor);\n    this.toggle();\n  }\n\n  /**\n   * Update selectedColor and close the panel\n   */\n  confirmSelectedColor() {\n    this._updateSelectedColor();\n    this.toggle();\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EMPTY_COLOR, coerceHexaColor, isValidColor } from './color-picker';\n\ninterface ColorOption {\n  type: string;\n  value: number;\n}\n\n@Component({\n  selector: 'mcc-color-picker-selector',\n  templateUrl: './color-picker-selector.component.html',\n  styleUrls: ['./color-picker-selector.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MccColorPickerSelectorComponent\n  implements AfterViewInit, OnInit, OnChanges, OnDestroy {\n  /**\n   * ElemenRef of the main color\n   */\n   @ViewChild('block', {static: false}) _block: ElementRef;\n\n  /**\n   * ElemenRef of the pointer main color\n   */\n  @ViewChild('blockPointer', {static: false}) _bp: ElementRef;\n\n  /**\n   * Canvas of the block\n   */\n  @ViewChild('blockCanvas', {static: false})\n  set blockCursor(el: ElementRef) {\n    this._bc = el;\n  }\n  private _bc: ElementRef;\n  private _blockContext: any;\n\n  /**\n   * ElementRef of the color base\n   */\n  @ViewChild('strip', {static: false}) _strip: ElementRef;\n  // hold _strip context\n  private _stripContext: any;\n\n  /**\n   * Container of the strip\n   */\n  @ViewChild('stripContainer', {static: false})\n  set stripCursor(el: ElementRef) {\n    this._sc = el;\n  }\n  private _sc: ElementRef;\n\n  /**\n   * Change height base of the selector\n   */\n  @Input('height')\n  set height(value: number) {\n    this._height = value;\n  }\n  get selectorHeight(): number {\n    return this._height;\n  }\n  get stripHeight(): number {\n    return this._height - 10;\n  }\n  private _height: number = 170;\n\n  /**\n   * Receive selected color from the component\n   */\n  @Input()\n  get selectedColor(): string {\n    return this._selectedColor;\n  }\n  set selectedColor(value: string) {\n    this._selectedColor = value || this.emptyColor;\n  }\n  private _selectedColor: string = '';\n\n  /**\n   * Hide the hexadecimal color forms.\n   */\n  @Input('hideHexForms')\n  get hideHexForms(): boolean {\n    return this._hideHexForms;\n  }\n  set hideHexForms(value: boolean) {\n    this._hideHexForms = value;\n  }\n  private _hideHexForms: boolean = false;\n\n  /**\n   * Emit update when a color is selected\n   */\n  @Output() changeSelectedColor = new EventEmitter();\n\n  /**\n   * RGBA current color\n   */\n  private _rgbaColor: string = 'rgba(255,0,0,1)';\n\n  /**\n   * Subject of the current selected color by the user\n   */\n  private _tmpSelectedColor: BehaviorSubject<string>;\n\n  /**\n   * Subscription of the tmpSelectedColor Observable\n   */\n  private _tmpSelectedColorSub: Subscription;\n\n  /**\n   * Subscription of the hexForm values change\n   */\n  private _hexValuesSub: Subscription;\n\n  /**\n   * Subscription of the rbgForm values change\n   */\n  private _rgbValuesSub: Subscription;\n\n  /**\n   * Handle color of the text\n   */\n  textClass: string = 'black';\n\n  /**\n   * Validate if the mouse button is pressed\n   */\n  _isPressed: boolean = false;\n\n  /**\n   * Form of the color in hexa\n   */\n  hexForm: FormGroup;\n\n  /**\n   * Form and keys of the fields in RGB\n   */\n  rgbKeys = ['R', 'G', 'B'];\n  rgbForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private render: Renderer2,\n    @Inject(EMPTY_COLOR) private emptyColor: string\n  ) {}\n\n  ngOnInit() {\n    this._tmpSelectedColor = new BehaviorSubject<string>(this._selectedColor);\n    this._tmpSelectedColorSub = this._tmpSelectedColor.subscribe(color => {\n      if (color !== this._selectedColor && isValidColor(color)) {\n        if (this.hexForm.get('hexCode').value !== color) {\n          this.hexForm.setValue({ hexCode: color });\n        }\n        this.changeSelectedColor.emit(coerceHexaColor(color) || this.emptyColor);\n      }\n    });\n\n    // hex form\n    this.hexForm = this.formBuilder.group({\n      hexCode: [this.selectedColor, [Validators.minLength(7), Validators.maxLength(7)]],\n    });\n\n    // rgb dynamic form\n    const rgbGroup: any = {};\n    const rgbValue: number[] = this._getRGB();\n    this.rgbKeys.forEach(\n      (key, index) =>\n        (rgbGroup[key] = new FormControl(rgbValue[index], {\n          validators: [\n            Validators.min(0),\n            Validators.max(256),\n            Validators.required,\n            Validators.maxLength(3),\n          ],\n          updateOn: 'blur',\n        }))\n    );\n    this.rgbForm = this.formBuilder.group(rgbGroup);\n\n    // watch changes on forms\n    this._onChanges();\n  }\n\n  /**\n   * Update RGB, RGBA and Gradient when selectedColor change and\n   * the mouse button is pressed\n   * @param changes SimpleChanges\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if ('selectedColor' in changes && changes['selectedColor'].currentValue !== this.emptyColor) {\n      if (!this._isPressed) {\n        this._updateRGB();\n        this._updateRGBA();\n        if (this._blockContext) {\n          this._fillGradient();\n        }\n      }\n\n      const rgb = this._getRGB();\n      const o = Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000);\n      this.textClass = o > 125 ? 'black' : 'white';\n    }\n  }\n\n  /**\n   * Destroy all subscriptions\n   */\n  ngOnDestroy() {\n    if (this._tmpSelectedColorSub && !this._tmpSelectedColorSub.closed) {\n      this._tmpSelectedColorSub.unsubscribe();\n    }\n    if (this._hexValuesSub && !this._hexValuesSub.closed) {\n      this._hexValuesSub.unsubscribe();\n    }\n    if (this._rgbValuesSub && !this._rgbValuesSub.closed) {\n      this._rgbValuesSub.unsubscribe();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.render.listen(this._block.nativeElement, 'mousedown', e => {\n      this._isPressed = true;\n      this.changeColor(e);\n    });\n    this.render.listen(this._block.nativeElement, 'mouseup', () => (this._isPressed = false));\n    this.render.listen(this._block.nativeElement, 'mouseout', () => (this._isPressed = false));\n    this.render.listen(this._block.nativeElement, 'mousemove', e => this.changeColor(e));\n    this._blockContext = this._bc.nativeElement.getContext('2d');\n    this._blockContext.rect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\n\n    this.render.listen(this._strip.nativeElement, 'mousedown', e => {\n      this._isPressed = true;\n      this.changeBaseColor(e);\n    });\n    this.render.listen(this._strip.nativeElement, 'mouseup', () => (this._isPressed = false));\n    this.render.listen(this._strip.nativeElement, 'mouseout', () => (this._isPressed = false));\n    this.render.listen(this._strip.nativeElement, 'mousemove', e => this.changeBaseColor(e));\n    this._stripContext = this._strip.nativeElement.getContext('2d');\n    this._stripContext.rect(\n      0,\n      0,\n      this._strip.nativeElement.width,\n      this._strip.nativeElement.height\n    );\n    const grd1 = this._stripContext.createLinearGradient(0, 0, 0, this._bc.nativeElement.height);\n    grd1.addColorStop(0, 'rgba(255, 0, 0, 1)');\n    grd1.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\n    grd1.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\n    grd1.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\n    grd1.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\n    grd1.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\n    grd1.addColorStop(1, 'rgba(255, 0, 0, 1)');\n    this._stripContext.fillStyle = grd1;\n    this._stripContext.fill();\n\n    this._fillGradient();\n  }\n\n  /**\n   * Generate colors based on the RGBA color\n   */\n  private _fillGradient(): void {\n    this._blockContext.fillStyle = this._rgbaColor;\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\n\n    const grdWhite = this._stripContext.createLinearGradient(0, 0, this._bc.nativeElement.width, 0);\n    grdWhite.addColorStop(0, 'rgba(255,255,255,1)');\n    grdWhite.addColorStop(1, 'rgba(255,255,255,0)');\n    this._blockContext.fillStyle = grdWhite;\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\n\n    const grdBlack = this._stripContext.createLinearGradient(\n      0,\n      0,\n      0,\n      this._bc.nativeElement.height\n    );\n    grdBlack.addColorStop(0, 'rgba(0,0,0,0)');\n    grdBlack.addColorStop(1, 'rgba(0,0,0,1)');\n    this._blockContext.fillStyle = grdBlack;\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\n  }\n\n  /**\n   * Watch change on forms\n   */\n  private _onChanges() {\n    // validate digited code and update when digitation is finished\n    this._hexValuesSub = this.hexForm.get('hexCode').valueChanges\n      .pipe(map(color => color !== this.emptyColor ? coerceHexaColor(color) : color))\n      .subscribe(value => {\n        if (!this._isPressed && isValidColor(value)) {\n          this._tmpSelectedColor.next(value || this.emptyColor);\n        }\n      });\n\n    this._rgbValuesSub = this.rgbForm.valueChanges.subscribe(controls => {\n      const data: string[] = [];\n      for (const key in controls) {\n        if (!controls[key] && controls[key] !== 0 || controls[key] > 255) {\n          data.push('');\n          continue;\n        }\n\n        data.push(controls[key]);\n      }\n\n      const hex = this._getHex(data);\n      if (hex !== this._selectedColor && hex.length === 7) {\n        this._tmpSelectedColor.next(hex);\n      }\n    });\n  }\n\n  /**\n   * Convert HEX/canvas value to rgb\n   * @param data any\n   * @returns number[]\n   */\n  private _getRGB(data?: any): number[] {\n    if (data) {\n      return [data[0], data[1], data[2]];\n    }\n    const hex = this._selectedColor.replace('#', '');\n    const r = parseInt(hex.slice(0, 2), 16);\n    const g = parseInt(hex.slice(2, 4), 16);\n    const b = parseInt(hex.slice(4, 6), 16);\n\n    return [r, g, b];\n  }\n\n  /**\n   * Convert RGB value to HEX\n   * @param data any\n   * @returns string\n   */\n  private _getHex(data: any): string {\n    const hex = new Array(3);\n    hex[0] = data[0].toString(16);\n    hex[1] = data[1].toString(16);\n    hex[2] = data[2].toString(16);\n\n    hex.forEach((val, key) => {\n      if (val.length === 1) {\n        hex[key] = '0' + hex[key];\n      }\n    });\n\n    return coerceHexaColor(`${hex[0]}${hex[1]}${hex[2]}`) || this.emptyColor;\n  }\n\n  /**\n   * Update RGBA color\n   * @param data any\n   */\n  private _updateRGBA(data?: any): void {\n    if (!this._selectedColor && !data) {\n      this._rgbaColor = 'rgba(255,0,0,1)';\n    }\n\n    const rgb = this._getRGB(data);\n    this._rgbaColor = `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, 1)`;\n  }\n\n  /**\n   * Update RGB form\n   * @param data any\n   */\n  private _updateRGB(data?: any): void {\n    if (!this.rgbForm) {\n      return;\n    }\n\n    if (!data) {\n      data = this._getRGB();\n    }\n\n    this.rgbForm.setValue({ R: data[0], G: data[1], B: data[2] });\n  }\n\n  /**\n   * Get selected base color from the canvas\n   * @param e MouseEvent\n   */\n  private changeBaseColor(e): void {\n    if (this._isPressed) {\n      this.render.setStyle(this._sc.nativeElement, 'background-position-y', `${e.offsetY}px`);\n      const data = this._stripContext.getImageData(e.offsetX, e.offsetY, 1, 1).data;\n      this._updateRGBA(data);\n      this._fillGradient();\n      this.updateValues(data);\n    }\n  }\n\n  /**\n   * Get selected color from the canvas\n   * @param e MouseEvent\n   */\n  private changeColor(e): void {\n    if (this._isPressed) {\n      this.render.setStyle(this._bp.nativeElement, 'top', `${e.offsetY - 5}px`);\n      this.render.setStyle(this._bp.nativeElement, 'left', `${e.offsetX - 5}px`);\n\n      const data = this._blockContext.getImageData(e.offsetX, e.offsetY, 1, 1).data;\n      this.updateValues(data);\n    }\n  }\n\n  /**\n   * Emit update from the selected color\n   * @param data any\n   */\n  private updateValues(data: any): void {\n    if (data) {\n      this._updateRGB(data);\n      this._tmpSelectedColor.next(this._getHex(data));\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Input,\n  Inject,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MccColorPickerComponent } from './color-picker.component';\nimport { EMPTY_COLOR, coerceHexaColor, isValidColor, MccColorPickerOption } from './color-picker';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n/**\n * This directive change the background of the button\n */\n@Directive({\n  selector: '[mccColorPickerOption], [mcc-color-picker-option]',\n  exportAs: 'mccColorPickerOption',\n})\nexport class MccColorPickerOptionDirective implements AfterViewInit {\n  /**\n   * Receive the color\n   */\n  @Input('mccColorPickerOption')\n  get color(): MccColorPickerOption {\n    return this._color;\n  }\n  set color(value: MccColorPickerOption) {\n    this._color = value;\n  }\n  private _color: MccColorPickerOption;\n\n  constructor(\n    private elementRef: ElementRef,\n    private render: Renderer2,\n    @Inject(EMPTY_COLOR) private emptyColor: string\n  ) {\n    this._color = emptyColor;\n  }\n\n  ngAfterViewInit() {\n    if (this.color) {\n      let color: string;\n      if (typeof this.color === 'string') {\n        color = this.color;\n      } else {\n        color = this.color.value;\n        this.render.setAttribute(this.elementRef.nativeElement, 'aria-label', this.color.text);\n      }\n\n      if (isValidColor(color)) {\n        // apply the color\n        this.render.setStyle(\n          this.elementRef.nativeElement,\n          'background',\n          coerceHexaColor(color) || this.emptyColor\n        );\n      }\n    }\n  }\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an ColorPicker.\n */\n@Directive({\n  selector: '[mcc-color-picker-origin], [mccColorPickerOrigin]',\n  exportAs: 'mccColorPickerOrigin',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MccColorPickerOriginDirective),\n      multi: true,\n    },\n  ],\n})\nexport class MccColorPickerOriginDirective implements ControlValueAccessor {\n  /**\n   * Emit changes from the origin\n   */\n  @Output() change: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  /**\n   * Propagate changes to angular\n   */\n  propagateChanges: (_: any) => {};\n\n  /**\n   * Reference to the element on which the directive is applied.\n   */\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    @Inject(EMPTY_COLOR) private emptyColor: string\n  ) {\n    // listen changes onkeyup and update color picker\n    renderer.listen(elementRef.nativeElement, 'keyup', (event: KeyboardEvent) => {\n      const value: string = event.currentTarget['value'];\n      if (event.isTrusted && isValidColor(value)) {\n        this.writeValueFromKeyup(coerceHexaColor(value) || this.emptyColor);\n      }\n    });\n  }\n\n  /**\n   * This method will be called by the forms API to write to the view when\n   * programmatic (model -> view) changes are requested.\n   */\n  writeValue(color: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', color);\n    this.change.next(color);\n    if (this.propagateChanges) {\n      this.propagateChanges(color);\n    }\n  }\n\n  /**\n   * This method will be called by the color picker\n   */\n  writeValueFromColorPicker(color: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', color);\n    this.propagateChanges(color);\n  }\n\n  /**\n   * This method will be called from origin whe key is up\n   */\n  writeValueFromKeyup(color: string) {\n    this.change.next(color);\n    this.propagateChanges(color);\n  }\n\n  /**\n   * This is called by the forms API on initialization so it can update the\n   * form model when values propagate from the view (view -> model).\n   * @param fn any\n   */\n  registerOnChange(fn: any): void {\n    this.propagateChanges = fn;\n  }\n\n  /**\n   * This is called by the forms API on initialization so it can update the form model on blur\n   * @param fn any\n   */\n  registerOnTouched(fn: any): void {}\n\n  /**\n   * called by the forms API when the control status changes to or from \"DISABLED\"\n   * @param isDisabled boolean\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n\n/**\n * Directive connect an color picker with any input, select or textarea.\n * The color picker will be automatically updated when the value of the origin is\n * changed.\n */\n@Directive({\n  selector: '[mcc-connected-color-picker], [mccConnectedColorPicker]',\n  exportAs: 'mccConnectedColorPicker',\n})\nexport class MccConnectedColorPickerDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Origin of the connected color picker\n   */\n  @Input('mccConnectedColorPickerOrigin') origin: MccColorPickerOriginDirective;\n\n  /**\n   * Color picker subscription\n   */\n  private _colorPickerSub: Subscription;\n\n  /**\n   * Origin subscription\n   */\n  private _originSub: Subscription;\n\n  constructor(\n    private colorPicker: MccColorPickerComponent,\n    public changeDetectorRef: ChangeDetectorRef,\n    @Inject(EMPTY_COLOR) private emptyColor: string\n  ) {}\n\n  ngAfterViewInit() {\n    if (!this._colorPickerSub) {\n      this._attachColorPicker();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._colorPickerSub && !this._colorPickerSub.closed) {\n      this._colorPickerSub.unsubscribe();\n    }\n    if (this._originSub && !this._originSub.closed) {\n      this._originSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Attach color picker and origin\n   */\n  private _attachColorPicker(): void {\n    // subscribe to origin change to update color picker\n    this._originSub = this.origin.change.subscribe(value => {\n      if (\n        isValidColor(value) ||\n        (value === this.emptyColor && this.colorPicker.selectedColor !== this.emptyColor)\n      ) {\n        this.colorPicker.updateTmpSelectedColor(value);\n      }\n      this.colorPicker.selectedColor = value;\n      this.changeDetectorRef.detectChanges();\n    });\n\n    // subscribe to color picker changes and set on origin element\n    this._colorPickerSub = this.colorPicker.change.subscribe(value =>\n      this.origin.writeValueFromColorPicker(value)\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatButtonModule, MatFormFieldModule, MatInputModule } from '@angular/material';\n\nimport { EMPTY_COLOR, USED_COLORS, ColorPickerConfig } from './color-picker';\n\nimport { MccColorPickerService } from './color-picker.service';\n\nimport { MccColorPickerComponent } from './color-picker.component';\nimport { MccColorPickerSelectorComponent } from './color-picker-selector.component';\nimport { MccColorPickerCollectionComponent } from './color-picker-collection.component';\nimport {\n  MccConnectedColorPickerDirective,\n  MccColorPickerOriginDirective,\n  MccColorPickerOptionDirective,\n} from './color-picker.directives';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortalModule,\n    OverlayModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  declarations: [\n    MccColorPickerComponent,\n    MccConnectedColorPickerDirective,\n    MccColorPickerSelectorComponent,\n    MccColorPickerOriginDirective,\n    MccColorPickerOptionDirective,\n    MccColorPickerCollectionComponent,\n  ],\n  exports: [\n    MccColorPickerComponent,\n    MccConnectedColorPickerDirective,\n    MccColorPickerOriginDirective,\n    MccColorPickerCollectionComponent,\n  ],\n  providers: [\n    MccColorPickerService,\n    { provide: EMPTY_COLOR, useValue: 'none' },\n    { provide: USED_COLORS, useValue: [] }\n  ],\n})\nexport class MccColorPickerModule {\n  /**\n   *\n   */\n  static forRoot(config: ColorPickerConfig): ModuleWithProviders {\n    return {\n      ngModule: MccColorPickerModule,\n      providers: [\n        { provide: EMPTY_COLOR, useValue: config.empty_color || 'none' },\n        { provide: USED_COLORS, useValue: config.used_colors || [] }\n      ],\n    };\n  }\n}\n","import { Injectable, Inject, OnDestroy } from '@angular/core';\nimport { MccScrollspyItemDirective } from './scrollspy.directives';\nimport { MccScrollspyGroup, SCROLLSPY_ANIMATION_SMOOTH } from './scrollspy';\nimport { Subscription, Observable, BehaviorSubject, fromEvent } from 'rxjs';\nimport { debounceTime, withLatestFrom } from 'rxjs/operators';\n\n@Injectable()\nexport class MccScrollspyService implements OnDestroy {\n  /**\n   * When scroll is from click event, change this attr to true\n   * So scroll event obeservable doesn't emit any update\n   */\n  private _fromClick: boolean = false;\n\n  /**\n   * List of scrollspy group\n   */\n  private data: MccScrollspyGroup[] = [];\n\n  /**\n   * Scroll event subscription\n   */\n  private _scrollSub: Subscription;\n\n  constructor(@Inject('Window') private window: any) {\n    // listen to scroll event\n    this._scrollSub = fromEvent(window, 'scroll')\n      .pipe(debounceTime(50), withLatestFrom(() => window.scrollY))\n      .subscribe(position => {\n        if (!this._fromClick) {\n          this._updateFocused(position);\n        }\n        this._fromClick = false;\n      });\n  }\n\n  ngOnDestroy() {\n    if (this._scrollSub && !this._scrollSub.closed) {\n      this._scrollSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Update information about wich element is on focus\n   * @param position number\n   */\n  private _updateFocused(position: number): void {\n    this.data.forEach(group => {\n      const items = [];\n      group.items.getValue().forEach((item, index) => {\n        item.focus = false;\n        if (item.top <= position) {\n          if (items[index - 1]) {\n            items[index - 1].focus = false;\n          }\n\n          item.focus = true;\n        }\n\n        items.push(item);\n      });\n\n      group.items.next(items);\n    });\n  }\n\n  /**\n   * Create new group of items\n   * @param name string\n   * @param items MccScrollspyItemDirective[]\n   * @param animation ScrollBehavior\n   */\n  create(\n    name: string,\n    items?: MccScrollspyItemDirective[],\n    animation?: ScrollBehavior\n  ): MccScrollspyGroup {\n    let group: MccScrollspyGroup = this.data.find(group => group.name === name);\n    if (!group) {\n      group = {\n        name: name,\n        animation: animation || SCROLLSPY_ANIMATION_SMOOTH,\n        items: new BehaviorSubject<MccScrollspyItemDirective[]>(items || []),\n      };\n\n      this.data.push(group);\n    } else {\n      group.items.next(items || []);\n    }\n\n    return group;\n  }\n\n  /**\n   * Return observable of the group\n   * @param name string\n   */\n  group(name: string): Observable<MccScrollspyItemDirective[]> {\n    let group: MccScrollspyGroup = this.data.find(g => g.name === name);\n    if (!group) {\n      group = this.create(name);\n    }\n\n    return group.items.asObservable();\n  }\n\n  /**\n   * Scroll to one of the items\n   * @param name string\n   * @param id string\n   */\n  scrollTo(name: string, id: string): void {\n    const group: MccScrollspyGroup = this.data.find(group => group.name === name);\n\n    group.items.getValue().forEach(item => {\n      item.focus = false;\n      if (item.id === id) {\n        this._fromClick = true;\n        this._updateFocused(item.top);\n        window.scrollTo({ top: item.top, behavior: group.animation });\n      }\n    });\n  }\n}\n","import { MccScrollspyItemDirective } from './scrollspy.directives';\nimport { BehaviorSubject } from 'rxjs';\n\n// scrollspy animations\nexport const SCROLLSPY_ANIMATION_SMOOTH = 'smooth';\nexport const SCROLLSPY_ANIMATION_INSTANT = 'instant';\nexport const SCROLLSPY_ANIMATION_AUTO = 'auto';\n\n/**\n * Scrollspy group\n */\nexport interface MccScrollspyGroup {\n  name: string;\n  animation: ScrollBehavior;\n  items: BehaviorSubject<MccScrollspyItemDirective[]>;\n}\n","import {\n  AfterContentInit,\n  Input,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  QueryList,\n  Renderer2,\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MccScrollspyService } from './scrollspy.service';\n\n@Directive({\n  selector: '[mccScrollspyItem], [mcc-scrollspy-item]',\n  exportAs: 'mccScrollspyItem',\n})\nexport class MccScrollspyItemDirective implements AfterContentInit {\n  /**\n   * Hold the element id, if element doesn't have id\n   * the method will create one\n   */\n  set id(id: string) {\n    if (!id) {\n      id = this._createId();\n      this.renderer.setProperty(this.elementRef.nativeElement, 'id', id);\n    }\n\n    this._id = id;\n  }\n  get id(): string {\n    return this._id;\n  }\n  private _id: string;\n\n  /**\n   * Element distance of the top\n   */\n  get top(): number {\n    return this.elementRef.nativeElement.offsetTop;\n  }\n\n  /**\n   * Element is focused\n   */\n  @Input('focus')\n  set focus(focused: boolean) {\n    this._focused = coerceBooleanProperty(focused);\n  }\n  get focus(): boolean {\n    return this._focused;\n  }\n  private _focused: boolean;\n\n  /**\n   * Label that will appear on the list of items.\n   * The default is the text inside the element\n   */\n  @Input() label: string;\n\n  constructor(public elementRef: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterContentInit() {\n    if (!this.label) {\n      this.label = this.elementRef.nativeElement.textContent;\n    }\n    this.id = this.elementRef.nativeElement.id;\n  }\n\n  /**\n   * Create an ID for the element\n   */\n  private _createId(): string {\n    let tmpID = this.label.toLowerCase().replace(/[ ]+/gi, '_');\n    return `mcc_scrollspy_${tmpID}`;\n  }\n}\n\n@Directive({\n  selector: '[mccScrollspyGroup], [mcc-scrollspy-group]',\n  exportAs: 'mccScrollspyGroup',\n})\nexport class MccScrollspyGroupDirective implements AfterContentInit {\n  /**\n   * List of scrollspy items\n   */\n  @ContentChildren(MccScrollspyItemDirective) items: QueryList<MccScrollspyItemDirective>;\n\n  /**\n   * Name of the scrollspy group\n   */\n  @Input('mccScrollspyGroup')\n  set name(name: string) {\n    this._name = name;\n  }\n  private _name: string;\n\n  constructor(private mccScrollspyService: MccScrollspyService) {}\n\n  ngAfterContentInit() {\n    // add the group items\n    const items = this.items.map(item => item);\n    this.mccScrollspyService.create(this._name, items);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\n\nimport { MccScrollspyService } from './scrollspy.service';\nimport { MccScrollspyGroupDirective, MccScrollspyItemDirective } from './scrollspy.directives';\n\n@NgModule({\n  imports: [CommonModule, ScrollDispatchModule],\n  providers: [MccScrollspyService, { provide: 'Window', useValue: window }],\n  declarations: [MccScrollspyGroupDirective, MccScrollspyItemDirective],\n  exports: [MccScrollspyGroupDirective, MccScrollspyItemDirective],\n})\nexport class MccScrollspyModule {}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Types of animation to be executed by speed-dial-actions\n */\nexport type ANIMATION = 'fling' | 'scale';\n\n/**\n * Default value of action button z-index \n */\nexport const Z_INDEX = 23;\n\n/**\n * SPIN animation used on speed-dial\n */\nexport const SPIN_ANIMATION = trigger('spin', [\n  state('open', style({\n    transform: 'rotate(360deg)',\n  })),\n  state('closed', style({\n    transform: 'rotate(0deg)',\n  })),\n  transition('open => closed', [animate('.3s')]),\n  transition('closed => open', [animate('.3s')]),\n]);","import { AfterContentInit, Component, ContentChildren, Input, QueryList, Renderer2, ViewEncapsulation } from '@angular/core';\nimport { MatButton } from '@angular/material';\nimport { BehaviorSubject } from 'rxjs';\nimport { ANIMATION, Z_INDEX } from './animations';\nimport { DIRECTION } from './directions';\n\n@Component({\n  selector: 'mcc-speed-dial-actions',\n  templateUrl: './speed-dial-actions.component.html',\n  styleUrls: ['./speed-dial-actions.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MccSpeedDialActionsComponent implements AfterContentInit {\n  /**\n   * Hold all the actions button inside fab speed dial\n   */\n  @ContentChildren(MatButton) _buttons: QueryList<MatButton>;\n\n  /**\n   * Set type of animation will be executed on open/close\n   * Type available are: scale | fling\n   */\n  @Input() set animation(animation: ANIMATION) {\n    this._animation.next(animation);\n  }\n  private _animation: BehaviorSubject<ANIMATION> = new BehaviorSubject('scale');\n\n  /**\n   * Last animation the was used\n   */\n  private _lastAnimationClass: string;\n\n  constructor(private renderer: Renderer2) { }\n\n  /**\n   * The z-index style and animation class are handle separate because\n   * z-index will be set only one time, and the animation class will be set\n   * every time the animation change\n   */\n  ngAfterContentInit() {\n    // set z-index style to each button action\n    this._buttons.forEach((button, index) => {\n      this.renderer.setStyle(button._elementRef.nativeElement, 'z-index', (Z_INDEX - index));\n    });\n\n    // set the animation class to each button action\n    this._animation.subscribe(animation => {\n      const nextAnimationClass = `speed-dial-item-animation-${animation}`;\n      this._buttons.forEach(button => {\n        if (this._lastAnimationClass) {\n          this.renderer.removeClass(button._elementRef.nativeElement, this._lastAnimationClass);\n        }\n        this.renderer.addClass(button._elementRef.nativeElement, nextAnimationClass);\n      });\n\n      this._lastAnimationClass = nextAnimationClass;\n    });\n  }\n\n  /**\n   * Responsible for change the state of the action buttons to visible\n   * \n   * @param direction DIRECTION\n   */\n  show(direction: DIRECTION) {\n    switch (this._animation.value) {\n      case 'scale': {\n        this._buttons.forEach((button, index) => {\n          const transition = 3 + (65 * index);\n\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', `${transition}ms`);\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(1)');\n        });\n        break;\n      }\n\n      case 'fling': {\n        const translateFn = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';\n        const sign = (direction == 'down' || direction == 'right') ? '-' : '';\n\n        this._buttons.forEach(button => {\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', `${translateFn}(${sign}0)`);\n        });\n      }\n    }\n  }\n\n  /**\n   * Hide all the buttons action\n   * \n   * @param direction DIRECTION\n   */\n  hide(direction: DIRECTION) {\n    switch (this._animation.value) {\n      case 'scale': {\n        this._buttons.forEach((button, index) => {\n          const transition = 3 - (65 * index);\n\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', `${transition}ms`);\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '0');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(0)');\n        });\n        break;\n      }\n\n      case 'fling': {\n        const translateFn = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';\n        const sign = (direction == 'down' || direction == 'right') ? '-' : '';\n\n        this._buttons.forEach((button, index) => {\n          const transform = (55 * (index + 1) - (index * 5));\n\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', `${translateFn}(${sign}${transform}px)`);\n        });\n      }\n    }\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { AfterViewInit, Component, ContentChild, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { SPIN_ANIMATION } from './animations';\nimport { DIRECTION } from './directions';\nimport { MccSpeedDialActionsComponent } from './speed-dial-actions.component';\n\n@Component({\n  selector: 'mcc-speed-dial',\n  templateUrl: './speed-dial.component.html',\n  styleUrls: ['./speed-dial.component.scss'],\n  animations: [SPIN_ANIMATION],\n})\nexport class MccSpeedDialComponent implements AfterViewInit, OnChanges {\n  /**\n   * Hold speed-dial-actions component inside this component\n   */\n  @ContentChild(MccSpeedDialActionsComponent, { static: false }) actions: MccSpeedDialActionsComponent;\n\n  /**\n   * Set initial 'open' state\n   */\n  @Input('open') set isOpen(open: boolean) {\n    this._isOpen = coerceBooleanProperty(open);\n  }\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n  private _isOpen: boolean = false;\n\n  /**\n   * When enabled, handle open/close state on mouse hover\n   */\n  @Input('mouseHover') set hover(hover: boolean) {\n    this._hover = coerceBooleanProperty(hover);\n  }\n  private _hover: boolean = false;\n\n  /**\n   * Enable/disable spin animation when button is clicked or hovered\n   */\n  @Input() set spin(spin: boolean) {\n    this._spin = spin;\n  }\n  get spin() {\n    return this._spin;\n  }\n  private _spin: boolean = true;\n\n  /**\n   * Define the direction of the actions button\n   * Directions available are: up | down | left | right\n   */\n  @Input() set direction(direction: DIRECTION) {\n    this._direction = direction;\n  }\n  get direction(): DIRECTION {\n    return this._direction;\n  }\n  private _direction: DIRECTION = 'up';\n\n  /**\n   * Event emitted when open state change\n   */\n  @Output() openStateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor() { }\n\n  /**\n   * Call fab speed dial actions functions to change the\n   * visibility of the buttons\n   */\n  private _setActionsState() {\n    if (this._isOpen) {\n      this.actions.show(this._direction);\n    } else {\n      this.actions.hide(this._direction);\n    }\n  }\n\n  /**\n   * Set initial state to the action buttons inside speed-dial-actions\n   */\n  ngAfterViewInit() {\n    this._setActionsState();\n  }\n\n  /**\n   * \n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if ('isOpen' in changes && changes['isOpen'].previousValue !== undefined) {\n      this._setActionsState();\n    }\n  }\n\n  /**\n   * When mouseHover is enabled and state is closed\n   * calls toggle to open the actions\n   */\n  hoverStart() {\n    if (this._hover && !this._isOpen) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * When mouseHover is enabled and state is open\n   * calls toggle to close the actions\n   */\n  hoverStop() {\n    if (this._hover && this._isOpen) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Change the open state\n   */\n  toggle() {\n    this._isOpen = !this._isOpen;\n\n    this._setActionsState();\n\n    this.openStateChange.emit(this._isOpen);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MccSpeedDialActionsComponent } from './speed-dial-actions.component';\nimport { MccSpeedDialComponent } from './speed-dial.component';\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule],\n  declarations: [MccSpeedDialComponent, MccSpeedDialActionsComponent],\n  exports: [MccSpeedDialComponent, MccSpeedDialActionsComponent],\n})\nexport class MccSpeedDialModule { }\n","// accepted hours\nexport type MccTimerPickerHour =\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | '10'\n  | '11'\n  | '12';\n\n// accepted minutes\nexport type MccTimerPickerMinute =\n  | '00'\n  | '05'\n  | '10'\n  | '15'\n  | '20'\n  | '25'\n  | '30'\n  | '35'\n  | '40'\n  | '45'\n  | '50'\n  | '55';\n\n/** \n * format 12 return hours with 'am' or 'pm'. Examples: \n * 12:00 am\n * 3:00 pm\n * 5:35 pm\n * \n * format 24 return hours in 24h period. Examples:\n * 12:00\n * 15:00\n * 17:35\n */\nexport type MccTimerPickerFormat = '12' | '24';\n\n// period typs\nexport type MccTimerPickerPeriod = 'am' | 'pm';\n\n// timer picker type\nexport type MccTimerPickerTimeType = 'hour' | 'min';\n\n/**\n * contants to create timer with HOURS or MINUTES\n */\nexport const HOURS: string[] = ['12', '11', '1', '10', '2', '9', '3', '8', '4', '7', '5', '6'];\nexport const MINUTES: string[] = [\n  '00',\n  '55',\n  '05',\n  '50',\n  '10',\n  '45',\n  '15',\n  '40',\n  '20',\n  '35',\n  '25',\n  '30',\n];\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  MccTimerPickerTimeType,\n  MccTimerPickerFormat,\n  MccTimerPickerHour,\n  MccTimerPickerMinute,\n  MccTimerPickerPeriod,\n  HOURS,\n  MINUTES,\n} from './timer-picker';\n\n@Component({\n  selector: 'mcc-timer-picker',\n  templateUrl: './timer-picker.component.html',\n  styleUrls: ['./timer-picker.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MccTimerPickerComponent {\n  /**\n   * Receive selected _hour after confirm\n   */\n  private _selectedHour: MccTimerPickerHour = '12';\n\n  /**\n   * Receive selected _minute after confirm\n   */\n  private _selectedMinute: MccTimerPickerMinute = '00';\n\n  /**\n   * Receive selected _period after confirm\n   */\n  private _selectedPeriod: MccTimerPickerPeriod = 'am';\n\n  /**\n   * Current value (hour/minute) to create the clock\n   */\n  get clock$(): Observable<string[]> {\n    return this._clock.asObservable();\n  }\n  private _clock: BehaviorSubject<string[]> = new BehaviorSubject(HOURS);\n\n  /**\n   * Type there is in focus (hour/minute)\n   */\n  get focus(): MccTimerPickerTimeType {\n    return this._focus;\n  }\n  set focus(value: MccTimerPickerTimeType) {\n    if (value !== this._focus) {\n      this._focus = value;\n      this._clock.next(this._focus === 'hour' ? HOURS : MINUTES);\n    }\n  }\n  private _focus: MccTimerPickerTimeType = 'hour';\n\n  /**\n   * State of the overlay\n   */\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n  set isOpen(value: boolean) {\n    this._isOpen = coerceBooleanProperty(value);\n  }\n  private _isOpen: boolean;\n\n  /**\n   * Return temporary selected hour (const HOURS)\n   */\n  get hour(): MccTimerPickerHour {\n    return this._hour;\n  }\n  private _hour: MccTimerPickerHour = '12';\n\n  /**\n   * Return temporary selected minute (const MINUTES)\n   */\n  get minute(): MccTimerPickerMinute {\n    return this._minute;\n  }\n  private _minute: MccTimerPickerMinute = '00';\n\n  /**\n   * Return temporary selected period (am/pm)\n   */\n  get period(): MccTimerPickerPeriod {\n    return this._period;\n  }\n  private _period: MccTimerPickerPeriod = 'am';\n\n  /**\n   * Hide Confirm and Cancel buttons\n   */\n  @Input()\n  get hideButtons(): boolean {\n    return this._hideButtons;\n  }\n  set hideButtons(value: boolean) {\n    this._hideButtons = coerceBooleanProperty(value);\n  }\n  private _hideButtons: boolean = false;\n\n  /**\n   * Format of the hour to be emited on confirm\n   */\n  @Input('mccTimerPickerFormat') format: MccTimerPickerFormat = '12';\n\n  @Input('mccTimerPickerMin') min: string = '00:00 am';\n\n  @Input('mccTimerPickerMax') max: string = '12:00 pm';\n\n  /**\n   * Change btnCancel label\n   */\n  @Input() btnCancel: string = 'Cancel';\n\n  /**\n   * Change btnConfirm label\n   */\n  @Input() btnConfirm: string = 'Ok';\n\n  /**\n   * Event emited when confirm button is pressed.\n   * If buttons are hidden, the event is emited when value is changed\n   */\n  @Output() selected: EventEmitter<string> = new EventEmitter();\n\n  /**\n   * Origin reference of connected timer picker\n   */\n  trigger: CdkOverlayOrigin;\n\n  /**\n   * Set to true when timer picker have been connected with another component\n   */\n  connected: boolean = false;\n\n  constructor() { }\n\n  /**\n   * Return timer option class to create line between the middle of the clock and\n   * the option\n   */\n  getSelectedClass(): string {\n    let name = 'selected-index-';\n    if (this.focus === 'hour') {\n      name += HOURS.findIndex(h => h === this.hour);\n    } else {\n      name += MINUTES.findIndex(m => m === this.minute);\n    }\n\n    return name;\n  }\n\n  /**\n   * Select option from the clock.\n   * @param value MccTimerPickerHour | MccTimerPickerMinute\n   */\n  select(value: MccTimerPickerHour | MccTimerPickerMinute): void {\n    if (this.focus === 'hour') {\n      this._hour = <MccTimerPickerHour>value;\n      this.focus = 'min';\n    } else {\n      this._minute = <MccTimerPickerMinute>value;\n    }\n\n    // if buttons are hidden, emit new event when value is changed\n    if (this._hideButtons) {\n      this.confirmSelectedTime();\n    }\n  }\n\n  /**\n   * Returns array containing time, hour and period fragments from time string\n   * @param time string\n   */\n  parseTimeInput(time: string): [number, number, string] {\n    const parsed = time.split(/\\s|:/).map((fragment, index) => {\n      return index === 2 ? fragment : parseInt(fragment, 10);\n    });\n\n    if (parsed.length === 2) {\n      // assume we are using 24 hour time format\n      const hours = parsed[0] as number;\n      if (hours > 11) {\n        parsed[0] = hours - 12;\n        parsed.push('pm');\n      } else {\n        parsed.push('am');\n      }\n    }\n\n    return parsed as [number, number, string];\n  }\n\n  /**\n   * Returns true if option value is not valid\n   * @param value MccTimerPickerHour | MccTimerPickerMinute\n   */\n  isOptionDisabled(value: MccTimerPickerHour | MccTimerPickerMinute): boolean {\n\n    const [minHour, minMinutes, minPeriod] = this.parseTimeInput(this.min);\n    const [maxHour, maxMinutes, maxPeriod] = this.parseTimeInput(this.max);\n\n    const optionValue = parseInt(value, 10);\n    const selectedHour = parseInt(this._hour, 10);\n    const selectedPeriod = this._period;\n\n    if (this.focus === 'hour') {\n      if (optionValue < minHour && selectedPeriod === minPeriod) {\n        return true;\n      } else if (optionValue > maxHour && selectedPeriod === maxPeriod) {\n        return true;\n      }\n    } else {\n      if (selectedHour === minHour && selectedPeriod === minPeriod && optionValue < minMinutes) {\n        return true;\n      } else if (selectedHour === maxHour && selectedPeriod === maxPeriod && optionValue > maxMinutes) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Change period of the clock\n   * @param period MccTimerPickerPeriod\n   */\n  changePeriod(period: MccTimerPickerPeriod): void {\n    this._period = period;\n    // if buttons are hidden, emit new event when value is changed\n    if (this._hideButtons) {\n      this.confirmSelectedTime();\n    }\n  }\n\n  /**\n   * Update selected color, close the panel and notify the user\n   */\n  backdropClick(): void {\n    this.confirmSelectedTime();\n    this._isOpen = false;\n  }\n\n  /**\n   * Change values to last confirm select time\n   */\n  cancelSelection(): void {\n    this._hour = this._selectedHour;\n    this._minute = this._selectedMinute;\n    this._period = this._selectedPeriod;\n    this._isOpen = false;\n  }\n\n  /**\n   * Set new values of time and emit new event with the formated timer\n   */\n  confirmSelectedTime(): void {\n    this._selectedHour = this.hour;\n    this._selectedMinute = this.minute;\n    this._selectedPeriod = this.period;\n\n    // format string to emit selected time\n    let formated: string;\n    if (this.format === '12') {\n      formated = `${this.hour}:${this.minute} ${this.period}`;\n    } else {\n      let hour: string = this.hour;\n      if (this.period === 'pm') {\n        hour = `${parseInt(hour) + 12}`;\n      }\n\n      formated = `${hour}:${this.minute}`;\n    }\n\n    this.selected.emit(formated);\n\n    // only close automatically if button aren't hidden\n    if (!this._hideButtons) {\n      this._isOpen = false;\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Input,\n  Output,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MccTimerPickerComponent } from './timer-picker.component';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Directive({\n  selector: '[mccTimerPickerOrigin], [mcc-timer-picker-origin]',\n  exportAs: 'mccTimerPickerOrigin',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MccTimerPickerOriginDirective),\n      multi: true,\n    },\n  ],\n})\nexport class MccTimerPickerOriginDirective {\n  /**\n   * Emit changes from the origin\n   */\n  @Output() change: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  /**\n   * Emit changes from the origin\n   */\n  @Output() hasFocus: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Propagate changes to angular\n   */\n  propagateChanges: (_: any) => {};\n\n  /**\n   * Reference to the element on which the directive is applied.\n   */\n  constructor(public elementRef: ElementRef, private renderer: Renderer2) {\n    // listen focus\n    renderer.listen(elementRef.nativeElement, 'focus', () => this.hasFocus.next(true));\n  }\n\n  /**\n   * This method will be called by the forms API to write to the view when\n   * programmatic (model -> view) changes are requested.\n   */\n  writeValue(time: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', time);\n    this.change.next(time);\n    if (this.propagateChanges) {\n      this.propagateChanges(time);\n    }\n  }\n\n  /**\n   * This method will be called by the time picker\n   */\n  writeValueFromTimerPicker(time: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', time);\n    this.propagateChanges(time);\n  }\n\n  /**\n   * This method will be called from origin whe key is up\n   */\n  writeValueFromKeyup(time: string) {\n    this.change.next(time);\n    this.propagateChanges(time);\n  }\n\n  /**\n   * This is called by the forms API on initialization so it can update the\n   * form model when values propagate from the view (view -> model).\n   * @param fn any\n   */\n  registerOnChange(fn: any): void {\n    this.propagateChanges = fn;\n  }\n\n  /**\n   * This is called by the forms API on initialization so it can update the form model on blur\n   * @param fn any\n   */\n  registerOnTouched(fn: any): void { }\n\n  /**\n   * called by the forms API when the control status changes to or from \"DISABLED\"\n   * @param isDisabled boolean\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n\n@Directive({\n  selector: '[mccConnectedTimerPicker], [mcc-connected-timer-picker]',\n  exportAs: 'mccConnectedTimerPicker',\n})\nexport class MccConnectedTimerPickerDirective implements AfterViewInit, OnDestroy {\n  /**\n   * origin of the connected timer picker\n   */\n  @Input('mccConnectedTimerPickerOrigin') origin: MccTimerPickerOriginDirective;\n\n  /**\n   * subscription of the origin focus observable\n   */\n  private _originFocus: Subscription;\n\n  /**\n   * subscription of the timer picker selected change\n   */\n  private _timerPickerSub: Subscription;\n\n  constructor(\n    private timerPicker: MccTimerPickerComponent,\n    public changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.timerPicker.connected = true;\n  }\n\n  ngAfterViewInit() {\n    if (!this._timerPickerSub) {\n      this.timerPicker.trigger = this.origin;\n      this._attachTimerPicker();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._originFocus && !this._originFocus.closed) {\n      this._originFocus.unsubscribe();\n    }\n    if (this._timerPickerSub && !this._timerPickerSub.closed) {\n      this._timerPickerSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Attach the timer picker to origin element (input)\n   */\n  private _attachTimerPicker(): void {\n    this._originFocus = this.origin.hasFocus.subscribe(focused => {\n      this.timerPicker.focus = 'hour';\n      this.timerPicker.isOpen = focused;\n      this.changeDetectorRef.detectChanges();\n    });\n\n    this._timerPickerSub = this.timerPicker.selected.subscribe(value =>\n      this.origin.writeValueFromTimerPicker(value)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatButtonModule } from '@angular/material';\n\nimport { MccTimerPickerComponent } from './timer-picker.component';\nimport {\n  MccTimerPickerOriginDirective,\n  MccConnectedTimerPickerDirective,\n} from './timer-picker.directives';\n\n@NgModule({\n  imports: [CommonModule, PortalModule, OverlayModule, MatButtonModule],\n  declarations: [\n    MccTimerPickerComponent,\n    MccTimerPickerOriginDirective,\n    MccConnectedTimerPickerDirective,\n  ],\n  exports: [\n    MccTimerPickerComponent,\n    MccTimerPickerOriginDirective,\n    MccConnectedTimerPickerDirective,\n  ],\n})\nexport class MccTimerPickerModule { }\n"]}