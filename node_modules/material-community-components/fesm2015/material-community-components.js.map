{"version":3,"file":"material-community-components.js","sources":["ng://material-community-components/color-picker/color-picker.ts","ng://material-community-components/color-picker/color-picker.service.ts","ng://material-community-components/color-picker/color-picker-collection.component.ts","ng://material-community-components/color-picker/color-picker.component.ts","ng://material-community-components/color-picker/color-picker-selector.component.ts","ng://material-community-components/color-picker/color-picker.directives.ts","ng://material-community-components/color-picker/color-picker.module.ts","ng://material-community-components/scrollspy/scrollspy.ts","ng://material-community-components/scrollspy/scrollspy.service.ts","ng://material-community-components/scrollspy/scrollspy.directives.ts","ng://material-community-components/scrollspy/scrollspy.module.ts","ng://material-community-components/speed-dial/animations.ts","ng://material-community-components/speed-dial/speed-dial-actions.component.ts","ng://material-community-components/speed-dial/speed-dial.component.ts","ng://material-community-components/speed-dial/speed-dial.module.ts","ng://material-community-components/timer-picker/timer-picker.ts","ng://material-community-components/timer-picker/timer-picker.component.ts","ng://material-community-components/timer-picker/timer-picker.directives.ts","ng://material-community-components/timer-picker/timer-picker.module.ts"],"sourcesContent":["import { InjectionToken } from '@angular/core';\n\n/** Contant used as empty color */\nexport const EMPTY_COLOR = new InjectionToken<string>('empty-color');\n\n/** Constante to set usedColorStart from the module import */\nexport const USED_COLORS = new InjectionToken<string[]>('used-colors');\n\n/**\n *\n */\nexport interface ColorPickerConfig {\n  empty_color?: string;\n  used_colors?: string[];\n}\n\n/**\n * This interface represents one color. Using this interface instead simple string\n * will help screen readers, because the text attribute ir set to the aria-label of\n * the option\n */\nexport interface MccColorPickerItem {\n  text: string;\n  value: string;\n}\n\nexport type MccColorPickerOption = string | MccColorPickerItem;\n\n/**\n * Verify if color has # as a first char. If not, add this char\n * to the color\n * @param color string\n */\nexport function coerceHexaColor(color: string): string {\n  if (color && color.indexOf('#') !== 0) {\n    color = `#${color}`;\n  }\n\n  if (!isValidColor(color)) {\n    return;\n  }\n\n  return color.toUpperCase();\n}\n\n/**\n * Validate if the color is valid\n * @param color string\n */\nexport function isValidColor(color: string): boolean {\n  // validate if color is an hexadecimal\n  if (\n    !color ||\n    color.charAt(0) !== '#' ||\n    color.length < 4 ||\n    color.length > 7\n  ) {\n    return false;\n  }\n\n  // validate rgb of the color\n  return color.replace('#', '')\n    .match(/.{1,2}/g)\n    .map(v => Number.isNaN(parseInt(v, 16)))\n    .indexOf(true) === -1;\n}\n","import { Injectable, Inject } from '@angular/core';\nimport { coerceHexaColor, isValidColor, EMPTY_COLOR, USED_COLORS } from './color-picker';\nimport { Observable, BehaviorSubject } from 'rxjs';\n\n@Injectable()\nexport class MccColorPickerService {\n  /**\n   * Array of all used colors\n   */\n  private _colors: BehaviorSubject<string[]> = new BehaviorSubject<string[]>([]);\n\n  constructor(\n    @Inject(EMPTY_COLOR) private emptyColor: string,\n    @Inject(USED_COLORS) private usedColors: string[]\n  ) {\n    this._colors.next(usedColors);\n  }\n\n  /**\n   * Add new color to used colors\n   * @param color string\n   */\n  addColor(color: string): void {\n    if (!color || !isValidColor(color)) {\n      return;\n    }\n\n    color = coerceHexaColor(color) || this.emptyColor;\n\n    const colors = this._colors.getValue();\n    if (!colors.find(_color => _color === color)) {\n      colors.push(color);\n      this._colors.next(colors);\n    }\n  }\n\n  /**\n   * Return Observable of colors\n   */\n  getColors(): Observable<string[]> {\n    return this._colors.asObservable();\n  }\n\n  /**\n   * Reset the array of used colors\n   */\n  resetUseColors(): void {\n    this._colors.next([]);\n  }\n}\n","import {\n  AfterContentChecked,\n  Component,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  EventEmitter,\n  Input,\n  Inject,\n  Output,\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { EMPTY_COLOR, MccColorPickerOption } from './color-picker';\n\n@Component({\n  selector: 'mcc-color-picker-collection',\n  templateUrl: './color-picker-collection.component.html',\n  styleUrls: ['./color-picker-collection.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MccColorPickerCollectionComponent implements AfterContentChecked {\n  /**\n   * Hide empty slots\n   * Empty slots are the difference between the collection size and limit\n   */\n  @Input()\n  set hideEmpty(value: boolean) {\n    this._hideEmpty = coerceBooleanProperty(value);\n  }\n  private _hideEmpty: boolean = false;\n\n  /**\n   * Name of the collection\n   */\n  @Input()\n  get label(): string {\n    return this._label;\n  }\n  set label(value: string) {\n    this._label = value;\n  }\n  private _label: string;\n\n  /**\n   * Array of colors to be displayed\n   */\n  @Input()\n  get colors(): MccColorPickerOption[] {\n    return this._colors;\n  }\n  set colors(values: MccColorPickerOption[]) {\n    this._colors = values;\n  }\n  private _colors: MccColorPickerOption[];\n\n  /**\n   * Size limit of the collection\n   */\n  @Input() size: number = 30;\n\n  /**\n   * Show transparent option\n   */\n  @Input() transparent: boolean = false;\n\n  /**\n   * Emit selected color value\n   */\n  @Output() changeColor: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(\n    private changeDetectorRef: ChangeDetectorRef,\n    @Inject(EMPTY_COLOR) public emptyColor: string\n  ) {}\n\n  ngAfterContentChecked() {\n    if (this._colors && this._colors.length !== this.size) {\n      this._colors = this._colors\n        .slice(0, this.size)\n        .concat(new Array(this._getCollectionDiffSize()));\n      this.changeDetectorRef.markForCheck();\n    }\n  }\n\n  /**\n   * Return the difference between the limit and the collection size.\n   * Always return 0 when hideEmpty is true\n   * @returns number\n   */\n  private _getCollectionDiffSize(): number {\n    if (this._colors.length > this.size || this._hideEmpty) {\n      return 0;\n    }\n\n    return this.size - this._colors.length;\n  }\n\n  /**\n   * Remove color\n   */\n  setTransparent(): void {\n    this.changeColor.emit(this.emptyColor);\n  }\n\n  /**\n   * Emit selected color value\n   * @param option MccColorPickerOption\n   */\n  setColor(option: MccColorPickerOption) {\n    const color = typeof option === 'string' ? option : option.value;\n    this.changeColor.emit(color);\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChildren,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Output,\n  QueryList,\n} from '@angular/core';\nimport { BehaviorSubject, Observable, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EMPTY_COLOR, coerceHexaColor } from './color-picker';\nimport { MccColorPickerCollectionComponent } from './color-picker-collection.component';\nimport { MccColorPickerService } from './color-picker.service';\n\n@Component({\n  selector: 'mcc-color-picker',\n  templateUrl: './color-picker.component.html',\n  styleUrls: ['./color-picker.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MccColorPickerComponent implements AfterContentInit, OnInit, OnDestroy {\n  /**\n   * Get all collections\n   */\n  @ContentChildren(MccColorPickerCollectionComponent)\n  _collections: QueryList<MccColorPickerCollectionComponent>;\n\n  /**\n   * Change label of the collection UsedColors\n   */\n  @Input()\n  get usedColorLabel(): string {\n    return this._usedColorLabel;\n  }\n  set usedColorLabel(value: string) {\n    this._usedColorLabel = value;\n  }\n  private _usedColorLabel: string = 'Used Colors';\n\n  /**\n   * Set initial value for used color\n   */\n  @Input()\n  set usedColorStart(colors: string[]) {\n    if (colors && colors.length > 0) {\n      for (const color of colors) {\n        this.colorPickerService.addColor(color);\n      }\n    }\n  }\n\n  /**\n   * Set usedColor to be used in reverse\n   */\n  @Input()\n  set reverseUsedColors(reverse: boolean) {\n    this._reverseUsedColor = coerceBooleanProperty(reverse);\n  }\n  private _reverseUsedColor: boolean = false;\n\n  /**\n   * Hide the hexadecimal color forms.\n   */\n  @Input('hideHexForms')\n  get hideHexForms(): boolean {\n    return this._hideHexForms;\n  }\n  set hideHexForms(value: boolean) {\n    this._hideHexForms = value;\n  }\n  private _hideHexForms: boolean = false;\n\n  /**\n   * Hide empty slots from the collection UsedColors\n   */\n  @Input('hideEmptyUsedColors')\n  get hideEmpty(): boolean {\n    return this._hideEmpty;\n  }\n  set hideEmpty(value: boolean) {\n    this._hideEmpty = coerceBooleanProperty(value);\n  }\n  private _hideEmpty: boolean = false;\n\n  /**\n   * Hide transparent option of UsedColors\n   */\n  @Input('hideTransparentUsedColors')\n  get hideTransparent(): boolean {\n    return this._hideTransparent;\n  }\n  set hideTransparent(value: boolean) {\n    this._hideTransparent = coerceBooleanProperty(value);\n  }\n  private _hideTransparent: boolean = false;\n\n  /**\n   * Hide UsedColors collection\n   */\n  @Input('hideUsedColors')\n  get hideUsedColors(): boolean {\n    return this._hideUsedColors;\n  }\n  set hideUsedColors(value: boolean) {\n    this._hideUsedColors = coerceBooleanProperty(value);\n  }\n  private _hideUsedColors: boolean = false;\n\n  /**\n   * Start with a color selected\n   */\n  @Input()\n  get selectedColor(): string {\n    return this._selectedColor;\n  }\n  set selectedColor(value: string) {\n    if (this._selectedColor !== value) {\n      this.changeDetectorRef.markForCheck();\n    }\n\n    this._selectedColor = coerceHexaColor(value) || this.emptyColor;\n  }\n  private _selectedColor: string;\n\n  /**\n   * Define if the panel will be initiated open\n   */\n  @Input()\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n  set isOpen(value: boolean) {\n    this._isOpen = coerceBooleanProperty(value);\n  }\n  private _isOpen: boolean = false;\n\n  /**\n   * Define if the panel will show in overlay or not\n   */\n  @Input()\n  get overlay(): boolean {\n    return this._overlay;\n  }\n  set overlay(value: boolean) {\n    this._overlay = coerceBooleanProperty(value);\n  }\n  private _overlay: boolean = true;\n\n  /**\n   * Hide the action buttons (cancel/confirm)\n   */\n  @Input()\n  get hideButtons(): boolean {\n    return this._hideButtons;\n  }\n  set hideButtons(value: boolean) {\n    this._hideButtons = coerceBooleanProperty(value);\n  }\n  private _hideButtons: boolean = false;\n\n  /**\n   * Define new height for the selector\n   */\n  @Input()\n  get colorPickerSelectorHeight(): number {\n    return this._colorPickerSelectorHeight;\n  }\n  set colorPickerSelectorHeight(height: number) {\n    this._colorPickerSelectorHeight = height;\n  }\n  private _colorPickerSelectorHeight: number = 170;\n\n  /**\n   * Hide the color picker selector\n   */\n  @Input()\n  get hideColorPickerSelector(): boolean {\n    return this._hideColorPickerSelector;\n  }\n  set hideColorPickerSelector(value: boolean) {\n    this._hideColorPickerSelector = coerceBooleanProperty(value);\n  }\n  private _hideColorPickerSelector: boolean = false;\n\n  /**\n   * Set the size of the used colors\n   */\n  @Input() usedSizeColors: number = 30;\n\n  /**\n   * Change btnCancel label\n   */\n  @Input() btnCancel: string = 'Cancel';\n\n  /**\n   * Change btnConfirm label\n   */\n  @Input() btnConfirm: string = 'Confirm';\n\n  /**\n   * Event emitted when user change the selected color (without confirm)\n   */\n  @Output() change = new EventEmitter();\n\n  /**\n   * Event emitted when selected color is confirm\n   */\n  @Output() selected = new EventEmitter();\n\n  /**\n   * Event emitted when is clicked outside of the component\n   */\n  @Output() clickOut = new EventEmitter();\n\n  /**\n   * Return a Observable with the color the user is picking\n   */\n  get tmpSelectedColor$(): Observable<string> {\n    return this._tmpSelectedColor.asObservable();\n  }\n  private _tmpSelectedColor: BehaviorSubject<string>;\n\n  /**\n   * Observable with all the colors used by the user\n   */\n  get usedColors$(): Observable<string[]> {\n    return this.colorPickerService\n      .getColors()\n      .pipe(map(colors => (!this._reverseUsedColor ? colors : [...colors].reverse())));\n  }\n\n  /**\n   * Array of subscriptions from the collections\n   */\n  private _collectionSubs: Subscription[] = [];\n\n  constructor(\n    private elementRef: ElementRef,\n    private changeDetectorRef: ChangeDetectorRef,\n    private colorPickerService: MccColorPickerService,\n    @Inject(EMPTY_COLOR) public emptyColor: string\n  ) {}\n\n  ngOnInit() {\n    if (!this._selectedColor) {\n      this._selectedColor = this.emptyColor;\n    }\n\n    this._tmpSelectedColor = new BehaviorSubject<string>(this._selectedColor);\n  }\n\n  /**\n   * Walk throw all collections and subcribe to changes\n   */\n  ngAfterContentInit() {\n    if (this._collections) {\n      this._collections.forEach((collection: MccColorPickerCollectionComponent) => {\n        const subscription = collection.changeColor.subscribe(color => {\n          this.updateTmpSelectedColor(color);\n        });\n\n        this._collectionSubs.push(subscription);\n      });\n    }\n  }\n\n  /**\n   * Destroy all subscriptions\n   */\n  ngOnDestroy() {\n    if (this._collectionSubs) {\n      this._collectionSubs.forEach((subscription: Subscription) => {\n        if (subscription && !subscription.closed) {\n          subscription.unsubscribe();\n        }\n      });\n    }\n  }\n\n  /**\n   * Update selected color and emit the change\n   */\n  private _updateSelectedColor() {\n    if (this._isOpen || !this.overlay) {\n      const tmpSelectedColor = this._tmpSelectedColor.getValue();\n      if (this._selectedColor !== tmpSelectedColor) {\n        this._selectedColor = tmpSelectedColor;\n        this.selected.next(this._selectedColor);\n      } else {\n        this.selected.emit(this._selectedColor);\n      }\n    }\n  }\n\n  /**\n   * Open/close color picker panel\n   */\n  toggle() {\n    this._isOpen = !this._isOpen;\n    if (!this._isOpen && this._selectedColor !== this.emptyColor) {\n      this.colorPickerService.addColor(this._selectedColor);\n    }\n  }\n\n  /**\n   * Update selected color, close the panel and notify the user\n   */\n  backdropClick(): void {\n    if (this._hideButtons) {\n      this.confirmSelectedColor();\n    } else {\n      this.cancelSelection();\n    }\n    this.clickOut.emit(null);\n  }\n\n  /**\n   * Update tmpSelectedColor\n   * @param color string\n   */\n  updateTmpSelectedColor(color: string) {\n    if (color) {\n      this._tmpSelectedColor.next(color);\n      this.change.next(color);\n      if (this._hideButtons) {\n        this._updateSelectedColor();\n      }\n    }\n  }\n\n  /**\n   * Cancel the selection and close the panel\n   */\n  cancelSelection() {\n    this._tmpSelectedColor.next(this._selectedColor);\n    this.toggle();\n  }\n\n  /**\n   * Update selectedColor and close the panel\n   */\n  confirmSelectedColor() {\n    this._updateSelectedColor();\n    this.toggle();\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  EventEmitter,\n  Inject,\n  Input,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Output,\n  Renderer2,\n  SimpleChanges,\n  ViewChild,\n} from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { EMPTY_COLOR, coerceHexaColor, isValidColor } from './color-picker';\n\ninterface ColorOption {\n  type: string;\n  value: number;\n}\n\n@Component({\n  selector: 'mcc-color-picker-selector',\n  templateUrl: './color-picker-selector.component.html',\n  styleUrls: ['./color-picker-selector.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MccColorPickerSelectorComponent\n  implements AfterViewInit, OnInit, OnChanges, OnDestroy {\n  /**\n   * ElemenRef of the main color\n   */\n   @ViewChild('block', {static: false}) _block: ElementRef;\n\n  /**\n   * ElemenRef of the pointer main color\n   */\n  @ViewChild('blockPointer', {static: false}) _bp: ElementRef;\n\n  /**\n   * Canvas of the block\n   */\n  @ViewChild('blockCanvas', {static: false})\n  set blockCursor(el: ElementRef) {\n    this._bc = el;\n  }\n  private _bc: ElementRef;\n  private _blockContext: any;\n\n  /**\n   * ElementRef of the color base\n   */\n  @ViewChild('strip', {static: false}) _strip: ElementRef;\n  // hold _strip context\n  private _stripContext: any;\n\n  /**\n   * Container of the strip\n   */\n  @ViewChild('stripContainer', {static: false})\n  set stripCursor(el: ElementRef) {\n    this._sc = el;\n  }\n  private _sc: ElementRef;\n\n  /**\n   * Change height base of the selector\n   */\n  @Input('height')\n  set height(value: number) {\n    this._height = value;\n  }\n  get selectorHeight(): number {\n    return this._height;\n  }\n  get stripHeight(): number {\n    return this._height - 10;\n  }\n  private _height: number = 170;\n\n  /**\n   * Receive selected color from the component\n   */\n  @Input()\n  get selectedColor(): string {\n    return this._selectedColor;\n  }\n  set selectedColor(value: string) {\n    this._selectedColor = value || this.emptyColor;\n  }\n  private _selectedColor: string = '';\n\n  /**\n   * Hide the hexadecimal color forms.\n   */\n  @Input('hideHexForms')\n  get hideHexForms(): boolean {\n    return this._hideHexForms;\n  }\n  set hideHexForms(value: boolean) {\n    this._hideHexForms = value;\n  }\n  private _hideHexForms: boolean = false;\n\n  /**\n   * Emit update when a color is selected\n   */\n  @Output() changeSelectedColor = new EventEmitter();\n\n  /**\n   * RGBA current color\n   */\n  private _rgbaColor: string = 'rgba(255,0,0,1)';\n\n  /**\n   * Subject of the current selected color by the user\n   */\n  private _tmpSelectedColor: BehaviorSubject<string>;\n\n  /**\n   * Subscription of the tmpSelectedColor Observable\n   */\n  private _tmpSelectedColorSub: Subscription;\n\n  /**\n   * Subscription of the hexForm values change\n   */\n  private _hexValuesSub: Subscription;\n\n  /**\n   * Subscription of the rbgForm values change\n   */\n  private _rgbValuesSub: Subscription;\n\n  /**\n   * Handle color of the text\n   */\n  textClass: string = 'black';\n\n  /**\n   * Validate if the mouse button is pressed\n   */\n  _isPressed: boolean = false;\n\n  /**\n   * Form of the color in hexa\n   */\n  hexForm: FormGroup;\n\n  /**\n   * Form and keys of the fields in RGB\n   */\n  rgbKeys = ['R', 'G', 'B'];\n  rgbForm: FormGroup;\n\n  constructor(\n    private formBuilder: FormBuilder,\n    private render: Renderer2,\n    @Inject(EMPTY_COLOR) private emptyColor: string\n  ) {}\n\n  ngOnInit() {\n    this._tmpSelectedColor = new BehaviorSubject<string>(this._selectedColor);\n    this._tmpSelectedColorSub = this._tmpSelectedColor.subscribe(color => {\n      if (color !== this._selectedColor && isValidColor(color)) {\n        if (this.hexForm.get('hexCode').value !== color) {\n          this.hexForm.setValue({ hexCode: color });\n        }\n        this.changeSelectedColor.emit(coerceHexaColor(color) || this.emptyColor);\n      }\n    });\n\n    // hex form\n    this.hexForm = this.formBuilder.group({\n      hexCode: [this.selectedColor, [Validators.minLength(7), Validators.maxLength(7)]],\n    });\n\n    // rgb dynamic form\n    const rgbGroup: any = {};\n    const rgbValue: number[] = this._getRGB();\n    this.rgbKeys.forEach(\n      (key, index) =>\n        (rgbGroup[key] = new FormControl(rgbValue[index], {\n          validators: [\n            Validators.min(0),\n            Validators.max(256),\n            Validators.required,\n            Validators.maxLength(3),\n          ],\n          updateOn: 'blur',\n        }))\n    );\n    this.rgbForm = this.formBuilder.group(rgbGroup);\n\n    // watch changes on forms\n    this._onChanges();\n  }\n\n  /**\n   * Update RGB, RGBA and Gradient when selectedColor change and\n   * the mouse button is pressed\n   * @param changes SimpleChanges\n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if ('selectedColor' in changes && changes['selectedColor'].currentValue !== this.emptyColor) {\n      if (!this._isPressed) {\n        this._updateRGB();\n        this._updateRGBA();\n        if (this._blockContext) {\n          this._fillGradient();\n        }\n      }\n\n      const rgb = this._getRGB();\n      const o = Math.round((rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000);\n      this.textClass = o > 125 ? 'black' : 'white';\n    }\n  }\n\n  /**\n   * Destroy all subscriptions\n   */\n  ngOnDestroy() {\n    if (this._tmpSelectedColorSub && !this._tmpSelectedColorSub.closed) {\n      this._tmpSelectedColorSub.unsubscribe();\n    }\n    if (this._hexValuesSub && !this._hexValuesSub.closed) {\n      this._hexValuesSub.unsubscribe();\n    }\n    if (this._rgbValuesSub && !this._rgbValuesSub.closed) {\n      this._rgbValuesSub.unsubscribe();\n    }\n  }\n\n  ngAfterViewInit() {\n    this.render.listen(this._block.nativeElement, 'mousedown', e => {\n      this._isPressed = true;\n      this.changeColor(e);\n    });\n    this.render.listen(this._block.nativeElement, 'mouseup', () => (this._isPressed = false));\n    this.render.listen(this._block.nativeElement, 'mouseout', () => (this._isPressed = false));\n    this.render.listen(this._block.nativeElement, 'mousemove', e => this.changeColor(e));\n    this._blockContext = this._bc.nativeElement.getContext('2d');\n    this._blockContext.rect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\n\n    this.render.listen(this._strip.nativeElement, 'mousedown', e => {\n      this._isPressed = true;\n      this.changeBaseColor(e);\n    });\n    this.render.listen(this._strip.nativeElement, 'mouseup', () => (this._isPressed = false));\n    this.render.listen(this._strip.nativeElement, 'mouseout', () => (this._isPressed = false));\n    this.render.listen(this._strip.nativeElement, 'mousemove', e => this.changeBaseColor(e));\n    this._stripContext = this._strip.nativeElement.getContext('2d');\n    this._stripContext.rect(\n      0,\n      0,\n      this._strip.nativeElement.width,\n      this._strip.nativeElement.height\n    );\n    const grd1 = this._stripContext.createLinearGradient(0, 0, 0, this._bc.nativeElement.height);\n    grd1.addColorStop(0, 'rgba(255, 0, 0, 1)');\n    grd1.addColorStop(0.17, 'rgba(255, 255, 0, 1)');\n    grd1.addColorStop(0.34, 'rgba(0, 255, 0, 1)');\n    grd1.addColorStop(0.51, 'rgba(0, 255, 255, 1)');\n    grd1.addColorStop(0.68, 'rgba(0, 0, 255, 1)');\n    grd1.addColorStop(0.85, 'rgba(255, 0, 255, 1)');\n    grd1.addColorStop(1, 'rgba(255, 0, 0, 1)');\n    this._stripContext.fillStyle = grd1;\n    this._stripContext.fill();\n\n    this._fillGradient();\n  }\n\n  /**\n   * Generate colors based on the RGBA color\n   */\n  private _fillGradient(): void {\n    this._blockContext.fillStyle = this._rgbaColor;\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\n\n    const grdWhite = this._stripContext.createLinearGradient(0, 0, this._bc.nativeElement.width, 0);\n    grdWhite.addColorStop(0, 'rgba(255,255,255,1)');\n    grdWhite.addColorStop(1, 'rgba(255,255,255,0)');\n    this._blockContext.fillStyle = grdWhite;\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\n\n    const grdBlack = this._stripContext.createLinearGradient(\n      0,\n      0,\n      0,\n      this._bc.nativeElement.height\n    );\n    grdBlack.addColorStop(0, 'rgba(0,0,0,0)');\n    grdBlack.addColorStop(1, 'rgba(0,0,0,1)');\n    this._blockContext.fillStyle = grdBlack;\n    this._blockContext.fillRect(0, 0, this._bc.nativeElement.width, this._bc.nativeElement.height);\n  }\n\n  /**\n   * Watch change on forms\n   */\n  private _onChanges() {\n    // validate digited code and update when digitation is finished\n    this._hexValuesSub = this.hexForm.get('hexCode').valueChanges\n      .pipe(map(color => color !== this.emptyColor ? coerceHexaColor(color) : color))\n      .subscribe(value => {\n        if (!this._isPressed && isValidColor(value)) {\n          this._tmpSelectedColor.next(value || this.emptyColor);\n        }\n      });\n\n    this._rgbValuesSub = this.rgbForm.valueChanges.subscribe(controls => {\n      const data: string[] = [];\n      for (const key in controls) {\n        if (!controls[key] && controls[key] !== 0 || controls[key] > 255) {\n          data.push('');\n          continue;\n        }\n\n        data.push(controls[key]);\n      }\n\n      const hex = this._getHex(data);\n      if (hex !== this._selectedColor && hex.length === 7) {\n        this._tmpSelectedColor.next(hex);\n      }\n    });\n  }\n\n  /**\n   * Convert HEX/canvas value to rgb\n   * @param data any\n   * @returns number[]\n   */\n  private _getRGB(data?: any): number[] {\n    if (data) {\n      return [data[0], data[1], data[2]];\n    }\n    const hex = this._selectedColor.replace('#', '');\n    const r = parseInt(hex.slice(0, 2), 16);\n    const g = parseInt(hex.slice(2, 4), 16);\n    const b = parseInt(hex.slice(4, 6), 16);\n\n    return [r, g, b];\n  }\n\n  /**\n   * Convert RGB value to HEX\n   * @param data any\n   * @returns string\n   */\n  private _getHex(data: any): string {\n    const hex = new Array(3);\n    hex[0] = data[0].toString(16);\n    hex[1] = data[1].toString(16);\n    hex[2] = data[2].toString(16);\n\n    hex.forEach((val, key) => {\n      if (val.length === 1) {\n        hex[key] = '0' + hex[key];\n      }\n    });\n\n    return coerceHexaColor(`${hex[0]}${hex[1]}${hex[2]}`) || this.emptyColor;\n  }\n\n  /**\n   * Update RGBA color\n   * @param data any\n   */\n  private _updateRGBA(data?: any): void {\n    if (!this._selectedColor && !data) {\n      this._rgbaColor = 'rgba(255,0,0,1)';\n    }\n\n    const rgb = this._getRGB(data);\n    this._rgbaColor = `rgba(${rgb[0]}, ${rgb[1]}, ${rgb[2]}, 1)`;\n  }\n\n  /**\n   * Update RGB form\n   * @param data any\n   */\n  private _updateRGB(data?: any): void {\n    if (!this.rgbForm) {\n      return;\n    }\n\n    if (!data) {\n      data = this._getRGB();\n    }\n\n    this.rgbForm.setValue({ R: data[0], G: data[1], B: data[2] });\n  }\n\n  /**\n   * Get selected base color from the canvas\n   * @param e MouseEvent\n   */\n  private changeBaseColor(e): void {\n    if (this._isPressed) {\n      this.render.setStyle(this._sc.nativeElement, 'background-position-y', `${e.offsetY}px`);\n      const data = this._stripContext.getImageData(e.offsetX, e.offsetY, 1, 1).data;\n      this._updateRGBA(data);\n      this._fillGradient();\n      this.updateValues(data);\n    }\n  }\n\n  /**\n   * Get selected color from the canvas\n   * @param e MouseEvent\n   */\n  private changeColor(e): void {\n    if (this._isPressed) {\n      this.render.setStyle(this._bp.nativeElement, 'top', `${e.offsetY - 5}px`);\n      this.render.setStyle(this._bp.nativeElement, 'left', `${e.offsetX - 5}px`);\n\n      const data = this._blockContext.getImageData(e.offsetX, e.offsetY, 1, 1).data;\n      this.updateValues(data);\n    }\n  }\n\n  /**\n   * Emit update from the selected color\n   * @param data any\n   */\n  private updateValues(data: any): void {\n    if (data) {\n      this._updateRGB(data);\n      this._tmpSelectedColor.next(this._getHex(data));\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Input,\n  Inject,\n  OnDestroy,\n  Output,\n  Renderer2,\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MccColorPickerComponent } from './color-picker.component';\nimport { EMPTY_COLOR, coerceHexaColor, isValidColor, MccColorPickerOption } from './color-picker';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n/**\n * This directive change the background of the button\n */\n@Directive({\n  selector: '[mccColorPickerOption], [mcc-color-picker-option]',\n  exportAs: 'mccColorPickerOption',\n})\nexport class MccColorPickerOptionDirective implements AfterViewInit {\n  /**\n   * Receive the color\n   */\n  @Input('mccColorPickerOption')\n  get color(): MccColorPickerOption {\n    return this._color;\n  }\n  set color(value: MccColorPickerOption) {\n    this._color = value;\n  }\n  private _color: MccColorPickerOption;\n\n  constructor(\n    private elementRef: ElementRef,\n    private render: Renderer2,\n    @Inject(EMPTY_COLOR) private emptyColor: string\n  ) {\n    this._color = emptyColor;\n  }\n\n  ngAfterViewInit() {\n    if (this.color) {\n      let color: string;\n      if (typeof this.color === 'string') {\n        color = this.color;\n      } else {\n        color = this.color.value;\n        this.render.setAttribute(this.elementRef.nativeElement, 'aria-label', this.color.text);\n      }\n\n      if (isValidColor(color)) {\n        // apply the color\n        this.render.setStyle(\n          this.elementRef.nativeElement,\n          'background',\n          coerceHexaColor(color) || this.emptyColor\n        );\n      }\n    }\n  }\n}\n\n/**\n * Directive applied to an element to make it usable as an origin for an ColorPicker.\n */\n@Directive({\n  selector: '[mcc-color-picker-origin], [mccColorPickerOrigin]',\n  exportAs: 'mccColorPickerOrigin',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MccColorPickerOriginDirective),\n      multi: true,\n    },\n  ],\n})\nexport class MccColorPickerOriginDirective implements ControlValueAccessor {\n  /**\n   * Emit changes from the origin\n   */\n  @Output() change: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  /**\n   * Propagate changes to angular\n   */\n  propagateChanges: (_: any) => {};\n\n  /**\n   * Reference to the element on which the directive is applied.\n   */\n  constructor(\n    private elementRef: ElementRef,\n    private renderer: Renderer2,\n    @Inject(EMPTY_COLOR) private emptyColor: string\n  ) {\n    // listen changes onkeyup and update color picker\n    renderer.listen(elementRef.nativeElement, 'keyup', (event: KeyboardEvent) => {\n      const value: string = event.currentTarget['value'];\n      if (event.isTrusted && isValidColor(value)) {\n        this.writeValueFromKeyup(coerceHexaColor(value) || this.emptyColor);\n      }\n    });\n  }\n\n  /**\n   * This method will be called by the forms API to write to the view when\n   * programmatic (model -> view) changes are requested.\n   */\n  writeValue(color: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', color);\n    this.change.next(color);\n    if (this.propagateChanges) {\n      this.propagateChanges(color);\n    }\n  }\n\n  /**\n   * This method will be called by the color picker\n   */\n  writeValueFromColorPicker(color: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', color);\n    this.propagateChanges(color);\n  }\n\n  /**\n   * This method will be called from origin whe key is up\n   */\n  writeValueFromKeyup(color: string) {\n    this.change.next(color);\n    this.propagateChanges(color);\n  }\n\n  /**\n   * This is called by the forms API on initialization so it can update the\n   * form model when values propagate from the view (view -> model).\n   * @param fn any\n   */\n  registerOnChange(fn: any): void {\n    this.propagateChanges = fn;\n  }\n\n  /**\n   * This is called by the forms API on initialization so it can update the form model on blur\n   * @param fn any\n   */\n  registerOnTouched(fn: any): void {}\n\n  /**\n   * called by the forms API when the control status changes to or from \"DISABLED\"\n   * @param isDisabled boolean\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n\n/**\n * Directive connect an color picker with any input, select or textarea.\n * The color picker will be automatically updated when the value of the origin is\n * changed.\n */\n@Directive({\n  selector: '[mcc-connected-color-picker], [mccConnectedColorPicker]',\n  exportAs: 'mccConnectedColorPicker',\n})\nexport class MccConnectedColorPickerDirective implements AfterViewInit, OnDestroy {\n  /**\n   * Origin of the connected color picker\n   */\n  @Input('mccConnectedColorPickerOrigin') origin: MccColorPickerOriginDirective;\n\n  /**\n   * Color picker subscription\n   */\n  private _colorPickerSub: Subscription;\n\n  /**\n   * Origin subscription\n   */\n  private _originSub: Subscription;\n\n  constructor(\n    private colorPicker: MccColorPickerComponent,\n    public changeDetectorRef: ChangeDetectorRef,\n    @Inject(EMPTY_COLOR) private emptyColor: string\n  ) {}\n\n  ngAfterViewInit() {\n    if (!this._colorPickerSub) {\n      this._attachColorPicker();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._colorPickerSub && !this._colorPickerSub.closed) {\n      this._colorPickerSub.unsubscribe();\n    }\n    if (this._originSub && !this._originSub.closed) {\n      this._originSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Attach color picker and origin\n   */\n  private _attachColorPicker(): void {\n    // subscribe to origin change to update color picker\n    this._originSub = this.origin.change.subscribe(value => {\n      if (\n        isValidColor(value) ||\n        (value === this.emptyColor && this.colorPicker.selectedColor !== this.emptyColor)\n      ) {\n        this.colorPicker.updateTmpSelectedColor(value);\n      }\n      this.colorPicker.selectedColor = value;\n      this.changeDetectorRef.detectChanges();\n    });\n\n    // subscribe to color picker changes and set on origin element\n    this._colorPickerSub = this.colorPicker.change.subscribe(value =>\n      this.origin.writeValueFromColorPicker(value)\n    );\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { MatButtonModule, MatFormFieldModule, MatInputModule } from '@angular/material';\n\nimport { EMPTY_COLOR, USED_COLORS, ColorPickerConfig } from './color-picker';\n\nimport { MccColorPickerService } from './color-picker.service';\n\nimport { MccColorPickerComponent } from './color-picker.component';\nimport { MccColorPickerSelectorComponent } from './color-picker-selector.component';\nimport { MccColorPickerCollectionComponent } from './color-picker-collection.component';\nimport {\n  MccConnectedColorPickerDirective,\n  MccColorPickerOriginDirective,\n  MccColorPickerOptionDirective,\n} from './color-picker.directives';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    PortalModule,\n    OverlayModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatFormFieldModule,\n    MatInputModule,\n  ],\n  declarations: [\n    MccColorPickerComponent,\n    MccConnectedColorPickerDirective,\n    MccColorPickerSelectorComponent,\n    MccColorPickerOriginDirective,\n    MccColorPickerOptionDirective,\n    MccColorPickerCollectionComponent,\n  ],\n  exports: [\n    MccColorPickerComponent,\n    MccConnectedColorPickerDirective,\n    MccColorPickerOriginDirective,\n    MccColorPickerCollectionComponent,\n  ],\n  providers: [\n    MccColorPickerService,\n    { provide: EMPTY_COLOR, useValue: 'none' },\n    { provide: USED_COLORS, useValue: [] }\n  ],\n})\nexport class MccColorPickerModule {\n  /**\n   *\n   */\n  static forRoot(config: ColorPickerConfig): ModuleWithProviders {\n    return {\n      ngModule: MccColorPickerModule,\n      providers: [\n        { provide: EMPTY_COLOR, useValue: config.empty_color || 'none' },\n        { provide: USED_COLORS, useValue: config.used_colors || [] }\n      ],\n    };\n  }\n}\n","import { MccScrollspyItemDirective } from './scrollspy.directives';\nimport { BehaviorSubject } from 'rxjs';\n\n// scrollspy animations\nexport const SCROLLSPY_ANIMATION_SMOOTH = 'smooth';\nexport const SCROLLSPY_ANIMATION_INSTANT = 'instant';\nexport const SCROLLSPY_ANIMATION_AUTO = 'auto';\n\n/**\n * Scrollspy group\n */\nexport interface MccScrollspyGroup {\n  name: string;\n  animation: ScrollBehavior;\n  items: BehaviorSubject<MccScrollspyItemDirective[]>;\n}\n","import { Injectable, Inject, OnDestroy } from '@angular/core';\nimport { MccScrollspyItemDirective } from './scrollspy.directives';\nimport { MccScrollspyGroup, SCROLLSPY_ANIMATION_SMOOTH } from './scrollspy';\nimport { Subscription, Observable, BehaviorSubject, fromEvent } from 'rxjs';\nimport { debounceTime, withLatestFrom } from 'rxjs/operators';\n\n@Injectable()\nexport class MccScrollspyService implements OnDestroy {\n  /**\n   * When scroll is from click event, change this attr to true\n   * So scroll event obeservable doesn't emit any update\n   */\n  private _fromClick: boolean = false;\n\n  /**\n   * List of scrollspy group\n   */\n  private data: MccScrollspyGroup[] = [];\n\n  /**\n   * Scroll event subscription\n   */\n  private _scrollSub: Subscription;\n\n  constructor(@Inject('Window') private window: any) {\n    // listen to scroll event\n    this._scrollSub = fromEvent(window, 'scroll')\n      .pipe(debounceTime(50), withLatestFrom(() => window.scrollY))\n      .subscribe(position => {\n        if (!this._fromClick) {\n          this._updateFocused(position);\n        }\n        this._fromClick = false;\n      });\n  }\n\n  ngOnDestroy() {\n    if (this._scrollSub && !this._scrollSub.closed) {\n      this._scrollSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Update information about wich element is on focus\n   * @param position number\n   */\n  private _updateFocused(position: number): void {\n    this.data.forEach(group => {\n      const items = [];\n      group.items.getValue().forEach((item, index) => {\n        item.focus = false;\n        if (item.top <= position) {\n          if (items[index - 1]) {\n            items[index - 1].focus = false;\n          }\n\n          item.focus = true;\n        }\n\n        items.push(item);\n      });\n\n      group.items.next(items);\n    });\n  }\n\n  /**\n   * Create new group of items\n   * @param name string\n   * @param items MccScrollspyItemDirective[]\n   * @param animation ScrollBehavior\n   */\n  create(\n    name: string,\n    items?: MccScrollspyItemDirective[],\n    animation?: ScrollBehavior\n  ): MccScrollspyGroup {\n    let group: MccScrollspyGroup = this.data.find(group => group.name === name);\n    if (!group) {\n      group = {\n        name: name,\n        animation: animation || SCROLLSPY_ANIMATION_SMOOTH,\n        items: new BehaviorSubject<MccScrollspyItemDirective[]>(items || []),\n      };\n\n      this.data.push(group);\n    } else {\n      group.items.next(items || []);\n    }\n\n    return group;\n  }\n\n  /**\n   * Return observable of the group\n   * @param name string\n   */\n  group(name: string): Observable<MccScrollspyItemDirective[]> {\n    let group: MccScrollspyGroup = this.data.find(g => g.name === name);\n    if (!group) {\n      group = this.create(name);\n    }\n\n    return group.items.asObservable();\n  }\n\n  /**\n   * Scroll to one of the items\n   * @param name string\n   * @param id string\n   */\n  scrollTo(name: string, id: string): void {\n    const group: MccScrollspyGroup = this.data.find(group => group.name === name);\n\n    group.items.getValue().forEach(item => {\n      item.focus = false;\n      if (item.id === id) {\n        this._fromClick = true;\n        this._updateFocused(item.top);\n        window.scrollTo({ top: item.top, behavior: group.animation });\n      }\n    });\n  }\n}\n","import {\n  AfterContentInit,\n  Input,\n  ContentChildren,\n  Directive,\n  ElementRef,\n  QueryList,\n  Renderer2,\n} from '@angular/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { MccScrollspyService } from './scrollspy.service';\n\n@Directive({\n  selector: '[mccScrollspyItem], [mcc-scrollspy-item]',\n  exportAs: 'mccScrollspyItem',\n})\nexport class MccScrollspyItemDirective implements AfterContentInit {\n  /**\n   * Hold the element id, if element doesn't have id\n   * the method will create one\n   */\n  set id(id: string) {\n    if (!id) {\n      id = this._createId();\n      this.renderer.setProperty(this.elementRef.nativeElement, 'id', id);\n    }\n\n    this._id = id;\n  }\n  get id(): string {\n    return this._id;\n  }\n  private _id: string;\n\n  /**\n   * Element distance of the top\n   */\n  get top(): number {\n    return this.elementRef.nativeElement.offsetTop;\n  }\n\n  /**\n   * Element is focused\n   */\n  @Input('focus')\n  set focus(focused: boolean) {\n    this._focused = coerceBooleanProperty(focused);\n  }\n  get focus(): boolean {\n    return this._focused;\n  }\n  private _focused: boolean;\n\n  /**\n   * Label that will appear on the list of items.\n   * The default is the text inside the element\n   */\n  @Input() label: string;\n\n  constructor(public elementRef: ElementRef, private renderer: Renderer2) {}\n\n  ngAfterContentInit() {\n    if (!this.label) {\n      this.label = this.elementRef.nativeElement.textContent;\n    }\n    this.id = this.elementRef.nativeElement.id;\n  }\n\n  /**\n   * Create an ID for the element\n   */\n  private _createId(): string {\n    let tmpID = this.label.toLowerCase().replace(/[ ]+/gi, '_');\n    return `mcc_scrollspy_${tmpID}`;\n  }\n}\n\n@Directive({\n  selector: '[mccScrollspyGroup], [mcc-scrollspy-group]',\n  exportAs: 'mccScrollspyGroup',\n})\nexport class MccScrollspyGroupDirective implements AfterContentInit {\n  /**\n   * List of scrollspy items\n   */\n  @ContentChildren(MccScrollspyItemDirective) items: QueryList<MccScrollspyItemDirective>;\n\n  /**\n   * Name of the scrollspy group\n   */\n  @Input('mccScrollspyGroup')\n  set name(name: string) {\n    this._name = name;\n  }\n  private _name: string;\n\n  constructor(private mccScrollspyService: MccScrollspyService) {}\n\n  ngAfterContentInit() {\n    // add the group items\n    const items = this.items.map(item => item);\n    this.mccScrollspyService.create(this._name, items);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ScrollDispatchModule } from '@angular/cdk/scrolling';\n\nimport { MccScrollspyService } from './scrollspy.service';\nimport { MccScrollspyGroupDirective, MccScrollspyItemDirective } from './scrollspy.directives';\n\n@NgModule({\n  imports: [CommonModule, ScrollDispatchModule],\n  providers: [MccScrollspyService, { provide: 'Window', useValue: window }],\n  declarations: [MccScrollspyGroupDirective, MccScrollspyItemDirective],\n  exports: [MccScrollspyGroupDirective, MccScrollspyItemDirective],\n})\nexport class MccScrollspyModule {}\n","import { animate, state, style, transition, trigger } from '@angular/animations';\n\n/**\n * Types of animation to be executed by speed-dial-actions\n */\nexport type ANIMATION = 'fling' | 'scale';\n\n/**\n * Default value of action button z-index \n */\nexport const Z_INDEX = 23;\n\n/**\n * SPIN animation used on speed-dial\n */\nexport const SPIN_ANIMATION = trigger('spin', [\n  state('open', style({\n    transform: 'rotate(360deg)',\n  })),\n  state('closed', style({\n    transform: 'rotate(0deg)',\n  })),\n  transition('open => closed', [animate('.3s')]),\n  transition('closed => open', [animate('.3s')]),\n]);","import { AfterContentInit, Component, ContentChildren, Input, QueryList, Renderer2, ViewEncapsulation } from '@angular/core';\nimport { MatButton } from '@angular/material';\nimport { BehaviorSubject } from 'rxjs';\nimport { ANIMATION, Z_INDEX } from './animations';\nimport { DIRECTION } from './directions';\n\n@Component({\n  selector: 'mcc-speed-dial-actions',\n  templateUrl: './speed-dial-actions.component.html',\n  styleUrls: ['./speed-dial-actions.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class MccSpeedDialActionsComponent implements AfterContentInit {\n  /**\n   * Hold all the actions button inside fab speed dial\n   */\n  @ContentChildren(MatButton) _buttons: QueryList<MatButton>;\n\n  /**\n   * Set type of animation will be executed on open/close\n   * Type available are: scale | fling\n   */\n  @Input() set animation(animation: ANIMATION) {\n    this._animation.next(animation);\n  }\n  private _animation: BehaviorSubject<ANIMATION> = new BehaviorSubject('scale');\n\n  /**\n   * Last animation the was used\n   */\n  private _lastAnimationClass: string;\n\n  constructor(private renderer: Renderer2) { }\n\n  /**\n   * The z-index style and animation class are handle separate because\n   * z-index will be set only one time, and the animation class will be set\n   * every time the animation change\n   */\n  ngAfterContentInit() {\n    // set z-index style to each button action\n    this._buttons.forEach((button, index) => {\n      this.renderer.setStyle(button._elementRef.nativeElement, 'z-index', (Z_INDEX - index));\n    });\n\n    // set the animation class to each button action\n    this._animation.subscribe(animation => {\n      const nextAnimationClass = `speed-dial-item-animation-${animation}`;\n      this._buttons.forEach(button => {\n        if (this._lastAnimationClass) {\n          this.renderer.removeClass(button._elementRef.nativeElement, this._lastAnimationClass);\n        }\n        this.renderer.addClass(button._elementRef.nativeElement, nextAnimationClass);\n      });\n\n      this._lastAnimationClass = nextAnimationClass;\n    });\n  }\n\n  /**\n   * Responsible for change the state of the action buttons to visible\n   * \n   * @param direction DIRECTION\n   */\n  show(direction: DIRECTION) {\n    switch (this._animation.value) {\n      case 'scale': {\n        this._buttons.forEach((button, index) => {\n          const transition = 3 + (65 * index);\n\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', `${transition}ms`);\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(1)');\n        });\n        break;\n      }\n\n      case 'fling': {\n        const translateFn = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';\n        const sign = (direction == 'down' || direction == 'right') ? '-' : '';\n\n        this._buttons.forEach(button => {\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', `${translateFn}(${sign}0)`);\n        });\n      }\n    }\n  }\n\n  /**\n   * Hide all the buttons action\n   * \n   * @param direction DIRECTION\n   */\n  hide(direction: DIRECTION) {\n    switch (this._animation.value) {\n      case 'scale': {\n        this._buttons.forEach((button, index) => {\n          const transition = 3 - (65 * index);\n\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', `${transition}ms`);\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '0');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(0)');\n        });\n        break;\n      }\n\n      case 'fling': {\n        const translateFn = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';\n        const sign = (direction == 'down' || direction == 'right') ? '-' : '';\n\n        this._buttons.forEach((button, index) => {\n          const transform = (55 * (index + 1) - (index * 5));\n\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');\n          this.renderer.setStyle(button._elementRef.nativeElement, 'transform', `${translateFn}(${sign}${transform}px)`);\n        });\n      }\n    }\n  }\n}\n","import { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { AfterViewInit, Component, ContentChild, EventEmitter, Input, OnChanges, Output, SimpleChanges } from '@angular/core';\nimport { SPIN_ANIMATION } from './animations';\nimport { DIRECTION } from './directions';\nimport { MccSpeedDialActionsComponent } from './speed-dial-actions.component';\n\n@Component({\n  selector: 'mcc-speed-dial',\n  templateUrl: './speed-dial.component.html',\n  styleUrls: ['./speed-dial.component.scss'],\n  animations: [SPIN_ANIMATION],\n})\nexport class MccSpeedDialComponent implements AfterViewInit, OnChanges {\n  /**\n   * Hold speed-dial-actions component inside this component\n   */\n  @ContentChild(MccSpeedDialActionsComponent, { static: false }) actions: MccSpeedDialActionsComponent;\n\n  /**\n   * Set initial 'open' state\n   */\n  @Input('open') set isOpen(open: boolean) {\n    this._isOpen = coerceBooleanProperty(open);\n  }\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n  private _isOpen: boolean = false;\n\n  /**\n   * When enabled, handle open/close state on mouse hover\n   */\n  @Input('mouseHover') set hover(hover: boolean) {\n    this._hover = coerceBooleanProperty(hover);\n  }\n  private _hover: boolean = false;\n\n  /**\n   * Enable/disable spin animation when button is clicked or hovered\n   */\n  @Input() set spin(spin: boolean) {\n    this._spin = spin;\n  }\n  get spin() {\n    return this._spin;\n  }\n  private _spin: boolean = true;\n\n  /**\n   * Define the direction of the actions button\n   * Directions available are: up | down | left | right\n   */\n  @Input() set direction(direction: DIRECTION) {\n    this._direction = direction;\n  }\n  get direction(): DIRECTION {\n    return this._direction;\n  }\n  private _direction: DIRECTION = 'up';\n\n  /**\n   * Event emitted when open state change\n   */\n  @Output() openStateChange: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  constructor() { }\n\n  /**\n   * Call fab speed dial actions functions to change the\n   * visibility of the buttons\n   */\n  private _setActionsState() {\n    if (this._isOpen) {\n      this.actions.show(this._direction);\n    } else {\n      this.actions.hide(this._direction);\n    }\n  }\n\n  /**\n   * Set initial state to the action buttons inside speed-dial-actions\n   */\n  ngAfterViewInit() {\n    this._setActionsState();\n  }\n\n  /**\n   * \n   */\n  ngOnChanges(changes: SimpleChanges) {\n    if ('isOpen' in changes && changes['isOpen'].previousValue !== undefined) {\n      this._setActionsState();\n    }\n  }\n\n  /**\n   * When mouseHover is enabled and state is closed\n   * calls toggle to open the actions\n   */\n  hoverStart() {\n    if (this._hover && !this._isOpen) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * When mouseHover is enabled and state is open\n   * calls toggle to close the actions\n   */\n  hoverStop() {\n    if (this._hover && this._isOpen) {\n      this.toggle();\n    }\n  }\n\n  /**\n   * Change the open state\n   */\n  toggle() {\n    this._isOpen = !this._isOpen;\n\n    this._setActionsState();\n\n    this.openStateChange.emit(this._isOpen);\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule } from '@angular/core';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MccSpeedDialActionsComponent } from './speed-dial-actions.component';\nimport { MccSpeedDialComponent } from './speed-dial.component';\n\n@NgModule({\n  imports: [CommonModule, MatButtonModule],\n  declarations: [MccSpeedDialComponent, MccSpeedDialActionsComponent],\n  exports: [MccSpeedDialComponent, MccSpeedDialActionsComponent],\n})\nexport class MccSpeedDialModule { }\n","// accepted hours\nexport type MccTimerPickerHour =\n  | '1'\n  | '2'\n  | '3'\n  | '4'\n  | '5'\n  | '6'\n  | '7'\n  | '8'\n  | '9'\n  | '10'\n  | '11'\n  | '12';\n\n// accepted minutes\nexport type MccTimerPickerMinute =\n  | '00'\n  | '05'\n  | '10'\n  | '15'\n  | '20'\n  | '25'\n  | '30'\n  | '35'\n  | '40'\n  | '45'\n  | '50'\n  | '55';\n\n/** \n * format 12 return hours with 'am' or 'pm'. Examples: \n * 12:00 am\n * 3:00 pm\n * 5:35 pm\n * \n * format 24 return hours in 24h period. Examples:\n * 12:00\n * 15:00\n * 17:35\n */\nexport type MccTimerPickerFormat = '12' | '24';\n\n// period typs\nexport type MccTimerPickerPeriod = 'am' | 'pm';\n\n// timer picker type\nexport type MccTimerPickerTimeType = 'hour' | 'min';\n\n/**\n * contants to create timer with HOURS or MINUTES\n */\nexport const HOURS: string[] = ['12', '11', '1', '10', '2', '9', '3', '8', '4', '7', '5', '6'];\nexport const MINUTES: string[] = [\n  '00',\n  '55',\n  '05',\n  '50',\n  '10',\n  '45',\n  '15',\n  '40',\n  '20',\n  '35',\n  '25',\n  '30',\n];\n","import {\n  Component,\n  ChangeDetectionStrategy,\n  EventEmitter,\n  Input,\n  Output,\n} from '@angular/core';\nimport { CdkOverlayOrigin } from '@angular/cdk/overlay';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport {\n  MccTimerPickerTimeType,\n  MccTimerPickerFormat,\n  MccTimerPickerHour,\n  MccTimerPickerMinute,\n  MccTimerPickerPeriod,\n  HOURS,\n  MINUTES,\n} from './timer-picker';\n\n@Component({\n  selector: 'mcc-timer-picker',\n  templateUrl: './timer-picker.component.html',\n  styleUrls: ['./timer-picker.component.scss'],\n  preserveWhitespaces: false,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MccTimerPickerComponent {\n  /**\n   * Receive selected _hour after confirm\n   */\n  private _selectedHour: MccTimerPickerHour = '12';\n\n  /**\n   * Receive selected _minute after confirm\n   */\n  private _selectedMinute: MccTimerPickerMinute = '00';\n\n  /**\n   * Receive selected _period after confirm\n   */\n  private _selectedPeriod: MccTimerPickerPeriod = 'am';\n\n  /**\n   * Current value (hour/minute) to create the clock\n   */\n  get clock$(): Observable<string[]> {\n    return this._clock.asObservable();\n  }\n  private _clock: BehaviorSubject<string[]> = new BehaviorSubject(HOURS);\n\n  /**\n   * Type there is in focus (hour/minute)\n   */\n  get focus(): MccTimerPickerTimeType {\n    return this._focus;\n  }\n  set focus(value: MccTimerPickerTimeType) {\n    if (value !== this._focus) {\n      this._focus = value;\n      this._clock.next(this._focus === 'hour' ? HOURS : MINUTES);\n    }\n  }\n  private _focus: MccTimerPickerTimeType = 'hour';\n\n  /**\n   * State of the overlay\n   */\n  get isOpen(): boolean {\n    return this._isOpen;\n  }\n  set isOpen(value: boolean) {\n    this._isOpen = coerceBooleanProperty(value);\n  }\n  private _isOpen: boolean;\n\n  /**\n   * Return temporary selected hour (const HOURS)\n   */\n  get hour(): MccTimerPickerHour {\n    return this._hour;\n  }\n  private _hour: MccTimerPickerHour = '12';\n\n  /**\n   * Return temporary selected minute (const MINUTES)\n   */\n  get minute(): MccTimerPickerMinute {\n    return this._minute;\n  }\n  private _minute: MccTimerPickerMinute = '00';\n\n  /**\n   * Return temporary selected period (am/pm)\n   */\n  get period(): MccTimerPickerPeriod {\n    return this._period;\n  }\n  private _period: MccTimerPickerPeriod = 'am';\n\n  /**\n   * Hide Confirm and Cancel buttons\n   */\n  @Input()\n  get hideButtons(): boolean {\n    return this._hideButtons;\n  }\n  set hideButtons(value: boolean) {\n    this._hideButtons = coerceBooleanProperty(value);\n  }\n  private _hideButtons: boolean = false;\n\n  /**\n   * Format of the hour to be emited on confirm\n   */\n  @Input('mccTimerPickerFormat') format: MccTimerPickerFormat = '12';\n\n  @Input('mccTimerPickerMin') min: string = '00:00 am';\n\n  @Input('mccTimerPickerMax') max: string = '12:00 pm';\n\n  /**\n   * Change btnCancel label\n   */\n  @Input() btnCancel: string = 'Cancel';\n\n  /**\n   * Change btnConfirm label\n   */\n  @Input() btnConfirm: string = 'Ok';\n\n  /**\n   * Event emited when confirm button is pressed.\n   * If buttons are hidden, the event is emited when value is changed\n   */\n  @Output() selected: EventEmitter<string> = new EventEmitter();\n\n  /**\n   * Origin reference of connected timer picker\n   */\n  trigger: CdkOverlayOrigin;\n\n  /**\n   * Set to true when timer picker have been connected with another component\n   */\n  connected: boolean = false;\n\n  constructor() { }\n\n  /**\n   * Return timer option class to create line between the middle of the clock and\n   * the option\n   */\n  getSelectedClass(): string {\n    let name = 'selected-index-';\n    if (this.focus === 'hour') {\n      name += HOURS.findIndex(h => h === this.hour);\n    } else {\n      name += MINUTES.findIndex(m => m === this.minute);\n    }\n\n    return name;\n  }\n\n  /**\n   * Select option from the clock.\n   * @param value MccTimerPickerHour | MccTimerPickerMinute\n   */\n  select(value: MccTimerPickerHour | MccTimerPickerMinute): void {\n    if (this.focus === 'hour') {\n      this._hour = <MccTimerPickerHour>value;\n      this.focus = 'min';\n    } else {\n      this._minute = <MccTimerPickerMinute>value;\n    }\n\n    // if buttons are hidden, emit new event when value is changed\n    if (this._hideButtons) {\n      this.confirmSelectedTime();\n    }\n  }\n\n  /**\n   * Returns array containing time, hour and period fragments from time string\n   * @param time string\n   */\n  parseTimeInput(time: string): [number, number, string] {\n    const parsed = time.split(/\\s|:/).map((fragment, index) => {\n      return index === 2 ? fragment : parseInt(fragment, 10);\n    });\n\n    if (parsed.length === 2) {\n      // assume we are using 24 hour time format\n      const hours = parsed[0] as number;\n      if (hours > 11) {\n        parsed[0] = hours - 12;\n        parsed.push('pm');\n      } else {\n        parsed.push('am');\n      }\n    }\n\n    return parsed as [number, number, string];\n  }\n\n  /**\n   * Returns true if option value is not valid\n   * @param value MccTimerPickerHour | MccTimerPickerMinute\n   */\n  isOptionDisabled(value: MccTimerPickerHour | MccTimerPickerMinute): boolean {\n\n    const [minHour, minMinutes, minPeriod] = this.parseTimeInput(this.min);\n    const [maxHour, maxMinutes, maxPeriod] = this.parseTimeInput(this.max);\n\n    const optionValue = parseInt(value, 10);\n    const selectedHour = parseInt(this._hour, 10);\n    const selectedPeriod = this._period;\n\n    if (this.focus === 'hour') {\n      if (optionValue < minHour && selectedPeriod === minPeriod) {\n        return true;\n      } else if (optionValue > maxHour && selectedPeriod === maxPeriod) {\n        return true;\n      }\n    } else {\n      if (selectedHour === minHour && selectedPeriod === minPeriod && optionValue < minMinutes) {\n        return true;\n      } else if (selectedHour === maxHour && selectedPeriod === maxPeriod && optionValue > maxMinutes) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Change period of the clock\n   * @param period MccTimerPickerPeriod\n   */\n  changePeriod(period: MccTimerPickerPeriod): void {\n    this._period = period;\n    // if buttons are hidden, emit new event when value is changed\n    if (this._hideButtons) {\n      this.confirmSelectedTime();\n    }\n  }\n\n  /**\n   * Update selected color, close the panel and notify the user\n   */\n  backdropClick(): void {\n    this.confirmSelectedTime();\n    this._isOpen = false;\n  }\n\n  /**\n   * Change values to last confirm select time\n   */\n  cancelSelection(): void {\n    this._hour = this._selectedHour;\n    this._minute = this._selectedMinute;\n    this._period = this._selectedPeriod;\n    this._isOpen = false;\n  }\n\n  /**\n   * Set new values of time and emit new event with the formated timer\n   */\n  confirmSelectedTime(): void {\n    this._selectedHour = this.hour;\n    this._selectedMinute = this.minute;\n    this._selectedPeriod = this.period;\n\n    // format string to emit selected time\n    let formated: string;\n    if (this.format === '12') {\n      formated = `${this.hour}:${this.minute} ${this.period}`;\n    } else {\n      let hour: string = this.hour;\n      if (this.period === 'pm') {\n        hour = `${parseInt(hour) + 12}`;\n      }\n\n      formated = `${hour}:${this.minute}`;\n    }\n\n    this.selected.emit(formated);\n\n    // only close automatically if button aren't hidden\n    if (!this._hideButtons) {\n      this._isOpen = false;\n    }\n  }\n}\n","import {\n  AfterViewInit,\n  ChangeDetectorRef,\n  Directive,\n  ElementRef,\n  forwardRef,\n  Input,\n  Output,\n  OnDestroy,\n  Renderer2,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MccTimerPickerComponent } from './timer-picker.component';\nimport { Subscription, BehaviorSubject } from 'rxjs';\n\n@Directive({\n  selector: '[mccTimerPickerOrigin], [mcc-timer-picker-origin]',\n  exportAs: 'mccTimerPickerOrigin',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MccTimerPickerOriginDirective),\n      multi: true,\n    },\n  ],\n})\nexport class MccTimerPickerOriginDirective {\n  /**\n   * Emit changes from the origin\n   */\n  @Output() change: BehaviorSubject<string> = new BehaviorSubject<string>('');\n\n  /**\n   * Emit changes from the origin\n   */\n  @Output() hasFocus: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n\n  /**\n   * Propagate changes to angular\n   */\n  propagateChanges: (_: any) => {};\n\n  /**\n   * Reference to the element on which the directive is applied.\n   */\n  constructor(public elementRef: ElementRef, private renderer: Renderer2) {\n    // listen focus\n    renderer.listen(elementRef.nativeElement, 'focus', () => this.hasFocus.next(true));\n  }\n\n  /**\n   * This method will be called by the forms API to write to the view when\n   * programmatic (model -> view) changes are requested.\n   */\n  writeValue(time: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', time);\n    this.change.next(time);\n    if (this.propagateChanges) {\n      this.propagateChanges(time);\n    }\n  }\n\n  /**\n   * This method will be called by the time picker\n   */\n  writeValueFromTimerPicker(time: string) {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'value', time);\n    this.propagateChanges(time);\n  }\n\n  /**\n   * This method will be called from origin whe key is up\n   */\n  writeValueFromKeyup(time: string) {\n    this.change.next(time);\n    this.propagateChanges(time);\n  }\n\n  /**\n   * This is called by the forms API on initialization so it can update the\n   * form model when values propagate from the view (view -> model).\n   * @param fn any\n   */\n  registerOnChange(fn: any): void {\n    this.propagateChanges = fn;\n  }\n\n  /**\n   * This is called by the forms API on initialization so it can update the form model on blur\n   * @param fn any\n   */\n  registerOnTouched(fn: any): void { }\n\n  /**\n   * called by the forms API when the control status changes to or from \"DISABLED\"\n   * @param isDisabled boolean\n   */\n  setDisabledState(isDisabled: boolean): void {\n    this.renderer.setProperty(this.elementRef.nativeElement, 'disabled', isDisabled);\n  }\n}\n\n@Directive({\n  selector: '[mccConnectedTimerPicker], [mcc-connected-timer-picker]',\n  exportAs: 'mccConnectedTimerPicker',\n})\nexport class MccConnectedTimerPickerDirective implements AfterViewInit, OnDestroy {\n  /**\n   * origin of the connected timer picker\n   */\n  @Input('mccConnectedTimerPickerOrigin') origin: MccTimerPickerOriginDirective;\n\n  /**\n   * subscription of the origin focus observable\n   */\n  private _originFocus: Subscription;\n\n  /**\n   * subscription of the timer picker selected change\n   */\n  private _timerPickerSub: Subscription;\n\n  constructor(\n    private timerPicker: MccTimerPickerComponent,\n    public changeDetectorRef: ChangeDetectorRef\n  ) {\n    this.timerPicker.connected = true;\n  }\n\n  ngAfterViewInit() {\n    if (!this._timerPickerSub) {\n      this.timerPicker.trigger = this.origin;\n      this._attachTimerPicker();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this._originFocus && !this._originFocus.closed) {\n      this._originFocus.unsubscribe();\n    }\n    if (this._timerPickerSub && !this._timerPickerSub.closed) {\n      this._timerPickerSub.unsubscribe();\n    }\n  }\n\n  /**\n   * Attach the timer picker to origin element (input)\n   */\n  private _attachTimerPicker(): void {\n    this._originFocus = this.origin.hasFocus.subscribe(focused => {\n      this.timerPicker.focus = 'hour';\n      this.timerPicker.isOpen = focused;\n      this.changeDetectorRef.detectChanges();\n    });\n\n    this._timerPickerSub = this.timerPicker.selected.subscribe(value =>\n      this.origin.writeValueFromTimerPicker(value)\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PortalModule } from '@angular/cdk/portal';\nimport { OverlayModule } from '@angular/cdk/overlay';\nimport { MatButtonModule } from '@angular/material';\n\nimport { MccTimerPickerComponent } from './timer-picker.component';\nimport {\n  MccTimerPickerOriginDirective,\n  MccConnectedTimerPickerDirective,\n} from './timer-picker.directives';\n\n@NgModule({\n  imports: [CommonModule, PortalModule, OverlayModule, MatButtonModule],\n  declarations: [\n    MccTimerPickerComponent,\n    MccTimerPickerOriginDirective,\n    MccConnectedTimerPickerDirective,\n  ],\n  exports: [\n    MccTimerPickerComponent,\n    MccTimerPickerOriginDirective,\n    MccConnectedTimerPickerDirective,\n  ],\n})\nexport class MccTimerPickerModule { }\n"],"names":["tslib_1.__param","tslib_1.__decorate","MatButtonModule"],"mappings":"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"}