import * as tslib_1 from "tslib";
var MccColorPickerModule_1;
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { ReactiveFormsModule } from '@angular/forms';
import { OverlayModule } from '@angular/cdk/overlay';
import { PortalModule } from '@angular/cdk/portal';
import { MatButtonModule, MatFormFieldModule, MatInputModule } from '@angular/material';
import { EMPTY_COLOR, USED_COLORS } from './color-picker';
import { MccColorPickerService } from './color-picker.service';
import { MccColorPickerComponent } from './color-picker.component';
import { MccColorPickerSelectorComponent } from './color-picker-selector.component';
import { MccColorPickerCollectionComponent } from './color-picker-collection.component';
import { MccConnectedColorPickerDirective, MccColorPickerOriginDirective, MccColorPickerOptionDirective, } from './color-picker.directives';
const ɵ0 = [];
let MccColorPickerModule = MccColorPickerModule_1 = class MccColorPickerModule {
    /**
     *
     */
    static forRoot(config) {
        return {
            ngModule: MccColorPickerModule_1,
            providers: [
                { provide: EMPTY_COLOR, useValue: config.empty_color || 'none' },
                { provide: USED_COLORS, useValue: config.used_colors || [] }
            ],
        };
    }
};
MccColorPickerModule = MccColorPickerModule_1 = tslib_1.__decorate([
    NgModule({
        imports: [
            CommonModule,
            PortalModule,
            OverlayModule,
            ReactiveFormsModule,
            MatButtonModule,
            MatFormFieldModule,
            MatInputModule,
        ],
        declarations: [
            MccColorPickerComponent,
            MccConnectedColorPickerDirective,
            MccColorPickerSelectorComponent,
            MccColorPickerOriginDirective,
            MccColorPickerOptionDirective,
            MccColorPickerCollectionComponent,
        ],
        exports: [
            MccColorPickerComponent,
            MccConnectedColorPickerDirective,
            MccColorPickerOriginDirective,
            MccColorPickerCollectionComponent,
        ],
        providers: [
            MccColorPickerService,
            { provide: EMPTY_COLOR, useValue: 'none' },
            { provide: USED_COLORS, useValue: ɵ0 }
        ],
    })
], MccColorPickerModule);
export { MccColorPickerModule };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sb3ItcGlja2VyLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL21hdGVyaWFsLWNvbW11bml0eS1jb21wb25lbnRzLyIsInNvdXJjZXMiOlsiY29sb3ItcGlja2VyL2NvbG9yLXBpY2tlci5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUF1QixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsZUFBZSxFQUFFLGtCQUFrQixFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRXhGLE9BQU8sRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFxQixNQUFNLGdCQUFnQixDQUFDO0FBRTdFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRS9ELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ25FLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3BGLE9BQU8sRUFBRSxpQ0FBaUMsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQ3hGLE9BQU8sRUFDTCxnQ0FBZ0MsRUFDaEMsNkJBQTZCLEVBQzdCLDZCQUE2QixHQUM5QixNQUFNLDJCQUEyQixDQUFDO1dBNkJHLEVBQUU7QUFHeEMsSUFBYSxvQkFBb0IsNEJBQWpDLE1BQWEsb0JBQW9CO0lBQy9COztPQUVHO0lBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUF5QjtRQUN0QyxPQUFPO1lBQ0wsUUFBUSxFQUFFLHNCQUFvQjtZQUM5QixTQUFTLEVBQUU7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsV0FBVyxJQUFJLE1BQU0sRUFBRTtnQkFDaEUsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLENBQUMsV0FBVyxJQUFJLEVBQUUsRUFBRTthQUM3RDtTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTtBQWJZLG9CQUFvQjtJQTlCaEMsUUFBUSxDQUFDO1FBQ1IsT0FBTyxFQUFFO1lBQ1AsWUFBWTtZQUNaLFlBQVk7WUFDWixhQUFhO1lBQ2IsbUJBQW1CO1lBQ25CLGVBQWU7WUFDZixrQkFBa0I7WUFDbEIsY0FBYztTQUNmO1FBQ0QsWUFBWSxFQUFFO1lBQ1osdUJBQXVCO1lBQ3ZCLGdDQUFnQztZQUNoQywrQkFBK0I7WUFDL0IsNkJBQTZCO1lBQzdCLDZCQUE2QjtZQUM3QixpQ0FBaUM7U0FDbEM7UUFDRCxPQUFPLEVBQUU7WUFDUCx1QkFBdUI7WUFDdkIsZ0NBQWdDO1lBQ2hDLDZCQUE2QjtZQUM3QixpQ0FBaUM7U0FDbEM7UUFDRCxTQUFTLEVBQUU7WUFDVCxxQkFBcUI7WUFDckIsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7WUFDMUMsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsSUFBSSxFQUFFO1NBQ3ZDO0tBQ0YsQ0FBQztHQUNXLG9CQUFvQixDQWFoQztTQWJZLG9CQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IE92ZXJsYXlNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvb3ZlcmxheSc7XG5pbXBvcnQgeyBQb3J0YWxNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jZGsvcG9ydGFsJztcbmltcG9ydCB7IE1hdEJ1dHRvbk1vZHVsZSwgTWF0Rm9ybUZpZWxkTW9kdWxlLCBNYXRJbnB1dE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL21hdGVyaWFsJztcblxuaW1wb3J0IHsgRU1QVFlfQ09MT1IsIFVTRURfQ09MT1JTLCBDb2xvclBpY2tlckNvbmZpZyB9IGZyb20gJy4vY29sb3ItcGlja2VyJztcblxuaW1wb3J0IHsgTWNjQ29sb3JQaWNrZXJTZXJ2aWNlIH0gZnJvbSAnLi9jb2xvci1waWNrZXIuc2VydmljZSc7XG5cbmltcG9ydCB7IE1jY0NvbG9yUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnLi9jb2xvci1waWNrZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE1jY0NvbG9yUGlja2VyU2VsZWN0b3JDb21wb25lbnQgfSBmcm9tICcuL2NvbG9yLXBpY2tlci1zZWxlY3Rvci5jb21wb25lbnQnO1xuaW1wb3J0IHsgTWNjQ29sb3JQaWNrZXJDb2xsZWN0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi9jb2xvci1waWNrZXItY29sbGVjdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHtcbiAgTWNjQ29ubmVjdGVkQ29sb3JQaWNrZXJEaXJlY3RpdmUsXG4gIE1jY0NvbG9yUGlja2VyT3JpZ2luRGlyZWN0aXZlLFxuICBNY2NDb2xvclBpY2tlck9wdGlvbkRpcmVjdGl2ZSxcbn0gZnJvbSAnLi9jb2xvci1waWNrZXIuZGlyZWN0aXZlcyc7XG5cbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGUsXG4gICAgUG9ydGFsTW9kdWxlLFxuICAgIE92ZXJsYXlNb2R1bGUsXG4gICAgUmVhY3RpdmVGb3Jtc01vZHVsZSxcbiAgICBNYXRCdXR0b25Nb2R1bGUsXG4gICAgTWF0Rm9ybUZpZWxkTW9kdWxlLFxuICAgIE1hdElucHV0TW9kdWxlLFxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBNY2NDb2xvclBpY2tlckNvbXBvbmVudCxcbiAgICBNY2NDb25uZWN0ZWRDb2xvclBpY2tlckRpcmVjdGl2ZSxcbiAgICBNY2NDb2xvclBpY2tlclNlbGVjdG9yQ29tcG9uZW50LFxuICAgIE1jY0NvbG9yUGlja2VyT3JpZ2luRGlyZWN0aXZlLFxuICAgIE1jY0NvbG9yUGlja2VyT3B0aW9uRGlyZWN0aXZlLFxuICAgIE1jY0NvbG9yUGlja2VyQ29sbGVjdGlvbkNvbXBvbmVudCxcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE1jY0NvbG9yUGlja2VyQ29tcG9uZW50LFxuICAgIE1jY0Nvbm5lY3RlZENvbG9yUGlja2VyRGlyZWN0aXZlLFxuICAgIE1jY0NvbG9yUGlja2VyT3JpZ2luRGlyZWN0aXZlLFxuICAgIE1jY0NvbG9yUGlja2VyQ29sbGVjdGlvbkNvbXBvbmVudCxcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgTWNjQ29sb3JQaWNrZXJTZXJ2aWNlLFxuICAgIHsgcHJvdmlkZTogRU1QVFlfQ09MT1IsIHVzZVZhbHVlOiAnbm9uZScgfSxcbiAgICB7IHByb3ZpZGU6IFVTRURfQ09MT1JTLCB1c2VWYWx1ZTogW10gfVxuICBdLFxufSlcbmV4cG9ydCBjbGFzcyBNY2NDb2xvclBpY2tlck1vZHVsZSB7XG4gIC8qKlxuICAgKlxuICAgKi9cbiAgc3RhdGljIGZvclJvb3QoY29uZmlnOiBDb2xvclBpY2tlckNvbmZpZyk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xuICAgIHJldHVybiB7XG4gICAgICBuZ01vZHVsZTogTWNjQ29sb3JQaWNrZXJNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgeyBwcm92aWRlOiBFTVBUWV9DT0xPUiwgdXNlVmFsdWU6IGNvbmZpZy5lbXB0eV9jb2xvciB8fCAnbm9uZScgfSxcbiAgICAgICAgeyBwcm92aWRlOiBVU0VEX0NPTE9SUywgdXNlVmFsdWU6IGNvbmZpZy51c2VkX2NvbG9ycyB8fCBbXSB9XG4gICAgICBdLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==