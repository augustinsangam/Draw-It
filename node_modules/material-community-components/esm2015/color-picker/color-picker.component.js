import * as tslib_1 from "tslib";
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, Inject, Input, Output, QueryList, } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { map } from 'rxjs/operators';
import { EMPTY_COLOR, coerceHexaColor } from './color-picker';
import { MccColorPickerCollectionComponent } from './color-picker-collection.component';
import { MccColorPickerService } from './color-picker.service';
let MccColorPickerComponent = class MccColorPickerComponent {
    constructor(elementRef, changeDetectorRef, colorPickerService, emptyColor) {
        this.elementRef = elementRef;
        this.changeDetectorRef = changeDetectorRef;
        this.colorPickerService = colorPickerService;
        this.emptyColor = emptyColor;
        this._usedColorLabel = 'Used Colors';
        this._reverseUsedColor = false;
        this._hideHexForms = false;
        this._hideEmpty = false;
        this._hideTransparent = false;
        this._hideUsedColors = false;
        this._isOpen = false;
        this._overlay = true;
        this._hideButtons = false;
        this._colorPickerSelectorHeight = 170;
        this._hideColorPickerSelector = false;
        /**
         * Set the size of the used colors
         */
        this.usedSizeColors = 30;
        /**
         * Change btnCancel label
         */
        this.btnCancel = 'Cancel';
        /**
         * Change btnConfirm label
         */
        this.btnConfirm = 'Confirm';
        /**
         * Event emitted when user change the selected color (without confirm)
         */
        this.change = new EventEmitter();
        /**
         * Event emitted when selected color is confirm
         */
        this.selected = new EventEmitter();
        /**
         * Event emitted when is clicked outside of the component
         */
        this.clickOut = new EventEmitter();
        /**
         * Array of subscriptions from the collections
         */
        this._collectionSubs = [];
    }
    /**
     * Change label of the collection UsedColors
     */
    get usedColorLabel() {
        return this._usedColorLabel;
    }
    set usedColorLabel(value) {
        this._usedColorLabel = value;
    }
    /**
     * Set initial value for used color
     */
    set usedColorStart(colors) {
        if (colors && colors.length > 0) {
            for (const color of colors) {
                this.colorPickerService.addColor(color);
            }
        }
    }
    /**
     * Set usedColor to be used in reverse
     */
    set reverseUsedColors(reverse) {
        this._reverseUsedColor = coerceBooleanProperty(reverse);
    }
    /**
     * Hide the hexadecimal color forms.
     */
    get hideHexForms() {
        return this._hideHexForms;
    }
    set hideHexForms(value) {
        this._hideHexForms = value;
    }
    /**
     * Hide empty slots from the collection UsedColors
     */
    get hideEmpty() {
        return this._hideEmpty;
    }
    set hideEmpty(value) {
        this._hideEmpty = coerceBooleanProperty(value);
    }
    /**
     * Hide transparent option of UsedColors
     */
    get hideTransparent() {
        return this._hideTransparent;
    }
    set hideTransparent(value) {
        this._hideTransparent = coerceBooleanProperty(value);
    }
    /**
     * Hide UsedColors collection
     */
    get hideUsedColors() {
        return this._hideUsedColors;
    }
    set hideUsedColors(value) {
        this._hideUsedColors = coerceBooleanProperty(value);
    }
    /**
     * Start with a color selected
     */
    get selectedColor() {
        return this._selectedColor;
    }
    set selectedColor(value) {
        if (this._selectedColor !== value) {
            this.changeDetectorRef.markForCheck();
        }
        this._selectedColor = coerceHexaColor(value) || this.emptyColor;
    }
    /**
     * Define if the panel will be initiated open
     */
    get isOpen() {
        return this._isOpen;
    }
    set isOpen(value) {
        this._isOpen = coerceBooleanProperty(value);
    }
    /**
     * Define if the panel will show in overlay or not
     */
    get overlay() {
        return this._overlay;
    }
    set overlay(value) {
        this._overlay = coerceBooleanProperty(value);
    }
    /**
     * Hide the action buttons (cancel/confirm)
     */
    get hideButtons() {
        return this._hideButtons;
    }
    set hideButtons(value) {
        this._hideButtons = coerceBooleanProperty(value);
    }
    /**
     * Define new height for the selector
     */
    get colorPickerSelectorHeight() {
        return this._colorPickerSelectorHeight;
    }
    set colorPickerSelectorHeight(height) {
        this._colorPickerSelectorHeight = height;
    }
    /**
     * Hide the color picker selector
     */
    get hideColorPickerSelector() {
        return this._hideColorPickerSelector;
    }
    set hideColorPickerSelector(value) {
        this._hideColorPickerSelector = coerceBooleanProperty(value);
    }
    /**
     * Return a Observable with the color the user is picking
     */
    get tmpSelectedColor$() {
        return this._tmpSelectedColor.asObservable();
    }
    /**
     * Observable with all the colors used by the user
     */
    get usedColors$() {
        return this.colorPickerService
            .getColors()
            .pipe(map(colors => (!this._reverseUsedColor ? colors : [...colors].reverse())));
    }
    ngOnInit() {
        if (!this._selectedColor) {
            this._selectedColor = this.emptyColor;
        }
        this._tmpSelectedColor = new BehaviorSubject(this._selectedColor);
    }
    /**
     * Walk throw all collections and subcribe to changes
     */
    ngAfterContentInit() {
        if (this._collections) {
            this._collections.forEach((collection) => {
                const subscription = collection.changeColor.subscribe(color => {
                    this.updateTmpSelectedColor(color);
                });
                this._collectionSubs.push(subscription);
            });
        }
    }
    /**
     * Destroy all subscriptions
     */
    ngOnDestroy() {
        if (this._collectionSubs) {
            this._collectionSubs.forEach((subscription) => {
                if (subscription && !subscription.closed) {
                    subscription.unsubscribe();
                }
            });
        }
    }
    /**
     * Update selected color and emit the change
     */
    _updateSelectedColor() {
        if (this._isOpen || !this.overlay) {
            const tmpSelectedColor = this._tmpSelectedColor.getValue();
            if (this._selectedColor !== tmpSelectedColor) {
                this._selectedColor = tmpSelectedColor;
                this.selected.next(this._selectedColor);
            }
            else {
                this.selected.emit(this._selectedColor);
            }
        }
    }
    /**
     * Open/close color picker panel
     */
    toggle() {
        this._isOpen = !this._isOpen;
        if (!this._isOpen && this._selectedColor !== this.emptyColor) {
            this.colorPickerService.addColor(this._selectedColor);
        }
    }
    /**
     * Update selected color, close the panel and notify the user
     */
    backdropClick() {
        if (this._hideButtons) {
            this.confirmSelectedColor();
        }
        else {
            this.cancelSelection();
        }
        this.clickOut.emit(null);
    }
    /**
     * Update tmpSelectedColor
     * @param color string
     */
    updateTmpSelectedColor(color) {
        if (color) {
            this._tmpSelectedColor.next(color);
            this.change.next(color);
            if (this._hideButtons) {
                this._updateSelectedColor();
            }
        }
    }
    /**
     * Cancel the selection and close the panel
     */
    cancelSelection() {
        this._tmpSelectedColor.next(this._selectedColor);
        this.toggle();
    }
    /**
     * Update selectedColor and close the panel
     */
    confirmSelectedColor() {
        this._updateSelectedColor();
        this.toggle();
    }
};
tslib_1.__decorate([
    ContentChildren(MccColorPickerCollectionComponent),
    tslib_1.__metadata("design:type", QueryList)
], MccColorPickerComponent.prototype, "_collections", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], MccColorPickerComponent.prototype, "usedColorLabel", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Array),
    tslib_1.__metadata("design:paramtypes", [Array])
], MccColorPickerComponent.prototype, "usedColorStart", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "reverseUsedColors", null);
tslib_1.__decorate([
    Input('hideHexForms'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "hideHexForms", null);
tslib_1.__decorate([
    Input('hideEmptyUsedColors'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "hideEmpty", null);
tslib_1.__decorate([
    Input('hideTransparentUsedColors'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "hideTransparent", null);
tslib_1.__decorate([
    Input('hideUsedColors'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "hideUsedColors", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], MccColorPickerComponent.prototype, "selectedColor", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "isOpen", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "overlay", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "hideButtons", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number),
    tslib_1.__metadata("design:paramtypes", [Number])
], MccColorPickerComponent.prototype, "colorPickerSelectorHeight", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccColorPickerComponent.prototype, "hideColorPickerSelector", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Number)
], MccColorPickerComponent.prototype, "usedSizeColors", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MccColorPickerComponent.prototype, "btnCancel", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MccColorPickerComponent.prototype, "btnConfirm", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], MccColorPickerComponent.prototype, "change", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], MccColorPickerComponent.prototype, "selected", void 0);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", Object)
], MccColorPickerComponent.prototype, "clickOut", void 0);
MccColorPickerComponent = tslib_1.__decorate([
    Component({
        selector: 'mcc-color-picker',
        template: "<!-- color picker overlay -->\n<ng-container *ngIf=\"overlay\">\n    <button type=\"button\" class=\"btn-picker\" cdkOverlayOrigin #trigger=\"cdkOverlayOrigin\" [ngClass]=\"{ 'empty': selectedColor === emptyColor }\"\n        [style.background]=\"selectedColor\" (click)=\"toggle()\">\n        <div class=\"transparent\" *ngIf=\"selectedColor === emptyColor\"></div>\n    </button>\n\n    <ng-template cdkConnectedOverlay cdkConnectedOverlayHasBackdrop cdkConnectedOverlayBackdropClass=\"mcc-color-picker-backdrop\"\n        [cdkConnectedOverlayOrigin]=\"trigger\" [cdkConnectedOverlayOpen]=\"isOpen\" (backdropClick)=\"backdropClick()\">\n\n        <ng-template [cdkPortalOutlet]=\"overlayPanel\"></ng-template>\n\n    </ng-template>\n</ng-container>\n\n<!-- color picker flat -->\n<ng-template *ngIf=\"!overlay\" [cdkPortalOutlet]=\"overlayPanel\"></ng-template>\n\n<!-- color picker component content -->\n<ng-template cdkPortal #overlayPanel=\"cdkPortal\">\n\n    <div class=\"mcc-color-picker-overlay mat-elevation-z6\" role=\"dialog\" aria-label=\"Color picker\">\n\n        <mcc-color-picker-selector *ngIf=\"!hideColorPickerSelector\" [selectedColor]=\"tmpSelectedColor$ | async\" [hideHexForms]=\"hideHexForms\"\n            [height]=\"colorPickerSelectorHeight\" (changeSelectedColor)=\"updateTmpSelectedColor($event)\">\n        </mcc-color-picker-selector>\n\n        <mcc-color-picker-collection *ngIf=\"!hideUsedColors\" [label]=\"usedColorLabel\" [size]=\"usedSizeColors\" [transparent]=\"!hideTransparent\"\n            [hideEmpty]=\"hideEmpty\" [colors]=\"usedColors$ | async\" (changeColor)=\"updateTmpSelectedColor($event)\">\n        </mcc-color-picker-collection>\n\n        <ng-content></ng-content>\n\n        <div *ngIf=\"!hideButtons\" class=\"mcc-color-picker-actions\">\n\n            <button mat-button role=\"button\" aria-label=\"Cancel\" (click)=\"cancelSelection()\">\n                {{ btnCancel }}\n            </button>\n\n            <button mat-button role=\"button\" aria-label=\"Confirm\" (click)=\"confirmSelectedColor()\">\n                {{ btnConfirm }}\n            </button>\n\n        </div>\n\n    </div>\n\n</ng-template>",
        preserveWhitespaces: false,
        changeDetection: ChangeDetectionStrategy.OnPush,
        styles: ["@import url(https://fonts.googleapis.com/css?family=Open+Sans:400,700);.btn-picker{width:25px;height:25px;cursor:pointer;background:0 0;border:2px solid #ddd}.btn-picker.empty{background:#fff!important}.mcc-color-picker-overlay{display:flex;width:260px;min-height:80px;position:relative;flex-direction:column;padding:0;background:#fff;font-family:'Open Sans',sans-serif}.mcc-color-picker-overlay .mcc-color-picker-preview{width:100%;height:8px}.transparent{width:32px;height:2px;border-bottom:2px solid red;transform:translateY(-3px) translateX(-2px) rotate(45deg);-webkit-transform:translateY(-2px) translateX(-11px) rotate(45deg);position:absolute}.mcc-color-picker-actions{display:flex;padding:4px;border-top:1px solid #ddd}.mcc-color-picker-actions button{color:#100214;text-transform:uppercase;font-family:'Open Sans',sans-serif;font-size:12px;font-weight:400;flex-grow:1}"]
    }),
    tslib_1.__param(3, Inject(EMPTY_COLOR)),
    tslib_1.__metadata("design:paramtypes", [ElementRef,
        ChangeDetectorRef,
        MccColorPickerService, String])
], MccColorPickerComponent);
export { MccColorPickerComponent };
//# sourceMappingURL=data:application/json;base64,