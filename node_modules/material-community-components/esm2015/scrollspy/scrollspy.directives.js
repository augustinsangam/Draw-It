import * as tslib_1 from "tslib";
import { Input, ContentChildren, Directive, ElementRef, QueryList, Renderer2, } from '@angular/core';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { MccScrollspyService } from './scrollspy.service';
let MccScrollspyItemDirective = class MccScrollspyItemDirective {
    constructor(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
    }
    /**
     * Hold the element id, if element doesn't have id
     * the method will create one
     */
    set id(id) {
        if (!id) {
            id = this._createId();
            this.renderer.setProperty(this.elementRef.nativeElement, 'id', id);
        }
        this._id = id;
    }
    get id() {
        return this._id;
    }
    /**
     * Element distance of the top
     */
    get top() {
        return this.elementRef.nativeElement.offsetTop;
    }
    /**
     * Element is focused
     */
    set focus(focused) {
        this._focused = coerceBooleanProperty(focused);
    }
    get focus() {
        return this._focused;
    }
    ngAfterContentInit() {
        if (!this.label) {
            this.label = this.elementRef.nativeElement.textContent;
        }
        this.id = this.elementRef.nativeElement.id;
    }
    /**
     * Create an ID for the element
     */
    _createId() {
        let tmpID = this.label.toLowerCase().replace(/[ ]+/gi, '_');
        return `mcc_scrollspy_${tmpID}`;
    }
};
tslib_1.__decorate([
    Input('focus'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccScrollspyItemDirective.prototype, "focus", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String)
], MccScrollspyItemDirective.prototype, "label", void 0);
MccScrollspyItemDirective = tslib_1.__decorate([
    Directive({
        selector: '[mccScrollspyItem], [mcc-scrollspy-item]',
        exportAs: 'mccScrollspyItem',
    }),
    tslib_1.__metadata("design:paramtypes", [ElementRef, Renderer2])
], MccScrollspyItemDirective);
export { MccScrollspyItemDirective };
let MccScrollspyGroupDirective = class MccScrollspyGroupDirective {
    constructor(mccScrollspyService) {
        this.mccScrollspyService = mccScrollspyService;
    }
    /**
     * Name of the scrollspy group
     */
    set name(name) {
        this._name = name;
    }
    ngAfterContentInit() {
        // add the group items
        const items = this.items.map(item => item);
        this.mccScrollspyService.create(this._name, items);
    }
};
tslib_1.__decorate([
    ContentChildren(MccScrollspyItemDirective),
    tslib_1.__metadata("design:type", QueryList)
], MccScrollspyGroupDirective.prototype, "items", void 0);
tslib_1.__decorate([
    Input('mccScrollspyGroup'),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], MccScrollspyGroupDirective.prototype, "name", null);
MccScrollspyGroupDirective = tslib_1.__decorate([
    Directive({
        selector: '[mccScrollspyGroup], [mcc-scrollspy-group]',
        exportAs: 'mccScrollspyGroup',
    }),
    tslib_1.__metadata("design:paramtypes", [MccScrollspyService])
], MccScrollspyGroupDirective);
export { MccScrollspyGroupDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsc3B5LmRpcmVjdGl2ZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbC1jb21tdW5pdHktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNjcm9sbHNweS9zY3JvbGxzcHkuZGlyZWN0aXZlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUVMLEtBQUssRUFDTCxlQUFlLEVBQ2YsU0FBUyxFQUNULFVBQVUsRUFDVixTQUFTLEVBQ1QsU0FBUyxHQUNWLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBTTFELElBQWEseUJBQXlCLEdBQXRDLE1BQWEseUJBQXlCO0lBMkNwQyxZQUFtQixVQUFzQixFQUFVLFFBQW1CO1FBQW5ELGVBQVUsR0FBVixVQUFVLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFXO0lBQUcsQ0FBQztJQTFDMUU7OztPQUdHO0lBQ0gsSUFBSSxFQUFFLENBQUMsRUFBVTtRQUNmLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztTQUNwRTtRQUVELElBQUksQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFDRCxJQUFJLEVBQUU7UUFDSixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7SUFDbEIsQ0FBQztJQUdEOztPQUVHO0lBQ0gsSUFBSSxHQUFHO1FBQ0wsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUM7SUFDakQsQ0FBQztJQUVEOztPQUVHO0lBRUgsSUFBSSxLQUFLLENBQUMsT0FBZ0I7UUFDeEIsSUFBSSxDQUFDLFFBQVEsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBQ0QsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFXRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQztTQUN4RDtRQUNELElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFFRDs7T0FFRztJQUNLLFNBQVM7UUFDZixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDNUQsT0FBTyxpQkFBaUIsS0FBSyxFQUFFLENBQUM7SUFDbEMsQ0FBQztDQUNGLENBQUE7QUE5QkM7SUFEQyxLQUFLLENBQUMsT0FBTyxDQUFDOzs7c0RBR2Q7QUFVUTtJQUFSLEtBQUssRUFBRTs7d0RBQWU7QUF6Q1oseUJBQXlCO0lBSnJDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSwwQ0FBMEM7UUFDcEQsUUFBUSxFQUFFLGtCQUFrQjtLQUM3QixDQUFDOzZDQTRDK0IsVUFBVSxFQUFvQixTQUFTO0dBM0MzRCx5QkFBeUIsQ0EyRHJDO1NBM0RZLHlCQUF5QjtBQWlFdEMsSUFBYSwwQkFBMEIsR0FBdkMsTUFBYSwwQkFBMEI7SUFlckMsWUFBb0IsbUJBQXdDO1FBQXhDLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBcUI7SUFBRyxDQUFDO0lBVGhFOztPQUVHO0lBRUgsSUFBSSxJQUFJLENBQUMsSUFBWTtRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztJQUNwQixDQUFDO0lBS0Qsa0JBQWtCO1FBQ2hCLHNCQUFzQjtRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0YsQ0FBQTtBQWxCNkM7SUFBM0MsZUFBZSxDQUFDLHlCQUF5QixDQUFDO3NDQUFRLFNBQVM7eURBQTRCO0FBTXhGO0lBREMsS0FBSyxDQUFDLG1CQUFtQixDQUFDOzs7c0RBRzFCO0FBWlUsMEJBQTBCO0lBSnRDLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSw0Q0FBNEM7UUFDdEQsUUFBUSxFQUFFLG1CQUFtQjtLQUM5QixDQUFDOzZDQWdCeUMsbUJBQW1CO0dBZmpELDBCQUEwQixDQXNCdEM7U0F0QlksMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJDb250ZW50SW5pdCxcbiAgSW5wdXQsXG4gIENvbnRlbnRDaGlsZHJlbixcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBRdWVyeUxpc3QsXG4gIFJlbmRlcmVyMixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBjb2VyY2VCb29sZWFuUHJvcGVydHkgfSBmcm9tICdAYW5ndWxhci9jZGsvY29lcmNpb24nO1xuaW1wb3J0IHsgTWNjU2Nyb2xsc3B5U2VydmljZSB9IGZyb20gJy4vc2Nyb2xsc3B5LnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbbWNjU2Nyb2xsc3B5SXRlbV0sIFttY2Mtc2Nyb2xsc3B5LWl0ZW1dJyxcbiAgZXhwb3J0QXM6ICdtY2NTY3JvbGxzcHlJdGVtJyxcbn0pXG5leHBvcnQgY2xhc3MgTWNjU2Nyb2xsc3B5SXRlbURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQge1xuICAvKipcbiAgICogSG9sZCB0aGUgZWxlbWVudCBpZCwgaWYgZWxlbWVudCBkb2Vzbid0IGhhdmUgaWRcbiAgICogdGhlIG1ldGhvZCB3aWxsIGNyZWF0ZSBvbmVcbiAgICovXG4gIHNldCBpZChpZDogc3RyaW5nKSB7XG4gICAgaWYgKCFpZCkge1xuICAgICAgaWQgPSB0aGlzLl9jcmVhdGVJZCgpO1xuICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2lkJywgaWQpO1xuICAgIH1cblxuICAgIHRoaXMuX2lkID0gaWQ7XG4gIH1cbiAgZ2V0IGlkKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG4gIHByaXZhdGUgX2lkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEVsZW1lbnQgZGlzdGFuY2Ugb2YgdGhlIHRvcFxuICAgKi9cbiAgZ2V0IHRvcCgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5vZmZzZXRUb3A7XG4gIH1cblxuICAvKipcbiAgICogRWxlbWVudCBpcyBmb2N1c2VkXG4gICAqL1xuICBASW5wdXQoJ2ZvY3VzJylcbiAgc2V0IGZvY3VzKGZvY3VzZWQ6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9mb2N1c2VkID0gY29lcmNlQm9vbGVhblByb3BlcnR5KGZvY3VzZWQpO1xuICB9XG4gIGdldCBmb2N1cygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fZm9jdXNlZDtcbiAgfVxuICBwcml2YXRlIF9mb2N1c2VkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBMYWJlbCB0aGF0IHdpbGwgYXBwZWFyIG9uIHRoZSBsaXN0IG9mIGl0ZW1zLlxuICAgKiBUaGUgZGVmYXVsdCBpcyB0aGUgdGV4dCBpbnNpZGUgdGhlIGVsZW1lbnRcbiAgICovXG4gIEBJbnB1dCgpIGxhYmVsOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMikge31cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgaWYgKCF0aGlzLmxhYmVsKSB7XG4gICAgICB0aGlzLmxhYmVsID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQudGV4dENvbnRlbnQ7XG4gICAgfVxuICAgIHRoaXMuaWQgPSB0aGlzLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5pZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gSUQgZm9yIHRoZSBlbGVtZW50XG4gICAqL1xuICBwcml2YXRlIF9jcmVhdGVJZCgpOiBzdHJpbmcge1xuICAgIGxldCB0bXBJRCA9IHRoaXMubGFiZWwudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bIF0rL2dpLCAnXycpO1xuICAgIHJldHVybiBgbWNjX3Njcm9sbHNweV8ke3RtcElEfWA7XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW21jY1Njcm9sbHNweUdyb3VwXSwgW21jYy1zY3JvbGxzcHktZ3JvdXBdJyxcbiAgZXhwb3J0QXM6ICdtY2NTY3JvbGxzcHlHcm91cCcsXG59KVxuZXhwb3J0IGNsYXNzIE1jY1Njcm9sbHNweUdyb3VwRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJDb250ZW50SW5pdCB7XG4gIC8qKlxuICAgKiBMaXN0IG9mIHNjcm9sbHNweSBpdGVtc1xuICAgKi9cbiAgQENvbnRlbnRDaGlsZHJlbihNY2NTY3JvbGxzcHlJdGVtRGlyZWN0aXZlKSBpdGVtczogUXVlcnlMaXN0PE1jY1Njcm9sbHNweUl0ZW1EaXJlY3RpdmU+O1xuXG4gIC8qKlxuICAgKiBOYW1lIG9mIHRoZSBzY3JvbGxzcHkgZ3JvdXBcbiAgICovXG4gIEBJbnB1dCgnbWNjU2Nyb2xsc3B5R3JvdXAnKVxuICBzZXQgbmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgfVxuICBwcml2YXRlIF9uYW1lOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBtY2NTY3JvbGxzcHlTZXJ2aWNlOiBNY2NTY3JvbGxzcHlTZXJ2aWNlKSB7fVxuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAvLyBhZGQgdGhlIGdyb3VwIGl0ZW1zXG4gICAgY29uc3QgaXRlbXMgPSB0aGlzLml0ZW1zLm1hcChpdGVtID0+IGl0ZW0pO1xuICAgIHRoaXMubWNjU2Nyb2xsc3B5U2VydmljZS5jcmVhdGUodGhpcy5fbmFtZSwgaXRlbXMpO1xuICB9XG59XG4iXX0=