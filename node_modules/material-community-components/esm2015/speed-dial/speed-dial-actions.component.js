import * as tslib_1 from "tslib";
import { Component, ContentChildren, Input, QueryList, Renderer2, ViewEncapsulation } from '@angular/core';
import { MatButton } from '@angular/material';
import { BehaviorSubject } from 'rxjs';
import { Z_INDEX } from './animations';
let MccSpeedDialActionsComponent = class MccSpeedDialActionsComponent {
    constructor(renderer) {
        this.renderer = renderer;
        this._animation = new BehaviorSubject('scale');
    }
    /**
     * Set type of animation will be executed on open/close
     * Type available are: scale | fling
     */
    set animation(animation) {
        this._animation.next(animation);
    }
    /**
     * The z-index style and animation class are handle separate because
     * z-index will be set only one time, and the animation class will be set
     * every time the animation change
     */
    ngAfterContentInit() {
        // set z-index style to each button action
        this._buttons.forEach((button, index) => {
            this.renderer.setStyle(button._elementRef.nativeElement, 'z-index', (Z_INDEX - index));
        });
        // set the animation class to each button action
        this._animation.subscribe(animation => {
            const nextAnimationClass = `speed-dial-item-animation-${animation}`;
            this._buttons.forEach(button => {
                if (this._lastAnimationClass) {
                    this.renderer.removeClass(button._elementRef.nativeElement, this._lastAnimationClass);
                }
                this.renderer.addClass(button._elementRef.nativeElement, nextAnimationClass);
            });
            this._lastAnimationClass = nextAnimationClass;
        });
    }
    /**
     * Responsible for change the state of the action buttons to visible
     *
     * @param direction DIRECTION
     */
    show(direction) {
        switch (this._animation.value) {
            case 'scale': {
                this._buttons.forEach((button, index) => {
                    const transition = 3 + (65 * index);
                    this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', `${transition}ms`);
                    this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');
                    this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(1)');
                });
                break;
            }
            case 'fling': {
                const translateFn = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';
                const sign = (direction == 'down' || direction == 'right') ? '-' : '';
                this._buttons.forEach(button => {
                    this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');
                    this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');
                    this.renderer.setStyle(button._elementRef.nativeElement, 'transform', `${translateFn}(${sign}0)`);
                });
            }
        }
    }
    /**
     * Hide all the buttons action
     *
     * @param direction DIRECTION
     */
    hide(direction) {
        switch (this._animation.value) {
            case 'scale': {
                this._buttons.forEach((button, index) => {
                    const transition = 3 - (65 * index);
                    this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', `${transition}ms`);
                    this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '0');
                    this.renderer.setStyle(button._elementRef.nativeElement, 'transform', 'scale(0)');
                });
                break;
            }
            case 'fling': {
                const translateFn = (direction == 'up' || direction == 'down') ? 'translateY' : 'translateX';
                const sign = (direction == 'down' || direction == 'right') ? '-' : '';
                this._buttons.forEach((button, index) => {
                    const transform = (55 * (index + 1) - (index * 5));
                    this.renderer.setStyle(button._elementRef.nativeElement, 'transition-delay', '0ms');
                    this.renderer.setStyle(button._elementRef.nativeElement, 'opacity', '1');
                    this.renderer.setStyle(button._elementRef.nativeElement, 'transform', `${translateFn}(${sign}${transform}px)`);
                });
            }
        }
    }
};
tslib_1.__decorate([
    ContentChildren(MatButton),
    tslib_1.__metadata("design:type", QueryList)
], MccSpeedDialActionsComponent.prototype, "_buttons", void 0);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], MccSpeedDialActionsComponent.prototype, "animation", null);
MccSpeedDialActionsComponent = tslib_1.__decorate([
    Component({
        selector: 'mcc-speed-dial-actions',
        template: "<ng-content select=\"button\"></ng-content>",
        encapsulation: ViewEncapsulation.None,
        styles: ["mcc-speed-dial-actions .speed-dial-item-animation-scale{transform:scale(0);transition:.3s cubic-bezier(.55,0,.55,.2);transition-duration:.14286s}mcc-speed-dial-actions .speed-dial-item-animation-fling{display:block;opacity:1;transition:.3s cubic-bezier(.55,0,.55,.2)}"]
    }),
    tslib_1.__metadata("design:paramtypes", [Renderer2])
], MccSpeedDialActionsComponent);
export { MccSpeedDialActionsComponent };
//# sourceMappingURL=data:application/json;base64,