import * as tslib_1 from "tslib";
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { Component, ContentChild, EventEmitter, Input, Output } from '@angular/core';
import { SPIN_ANIMATION } from './animations';
import { MccSpeedDialActionsComponent } from './speed-dial-actions.component';
let MccSpeedDialComponent = class MccSpeedDialComponent {
    constructor() {
        this._isOpen = false;
        this._hover = false;
        this._spin = true;
        this._direction = 'up';
        /**
         * Event emitted when open state change
         */
        this.openStateChange = new EventEmitter();
    }
    /**
     * Set initial 'open' state
     */
    set isOpen(open) {
        this._isOpen = coerceBooleanProperty(open);
    }
    get isOpen() {
        return this._isOpen;
    }
    /**
     * When enabled, handle open/close state on mouse hover
     */
    set hover(hover) {
        this._hover = coerceBooleanProperty(hover);
    }
    /**
     * Enable/disable spin animation when button is clicked or hovered
     */
    set spin(spin) {
        this._spin = spin;
    }
    get spin() {
        return this._spin;
    }
    /**
     * Define the direction of the actions button
     * Directions available are: up | down | left | right
     */
    set direction(direction) {
        this._direction = direction;
    }
    get direction() {
        return this._direction;
    }
    /**
     * Call fab speed dial actions functions to change the
     * visibility of the buttons
     */
    _setActionsState() {
        if (this._isOpen) {
            this.actions.show(this._direction);
        }
        else {
            this.actions.hide(this._direction);
        }
    }
    /**
     * Set initial state to the action buttons inside speed-dial-actions
     */
    ngAfterViewInit() {
        this._setActionsState();
    }
    /**
     *
     */
    ngOnChanges(changes) {
        if ('isOpen' in changes && changes['isOpen'].previousValue !== undefined) {
            this._setActionsState();
        }
    }
    /**
     * When mouseHover is enabled and state is closed
     * calls toggle to open the actions
     */
    hoverStart() {
        if (this._hover && !this._isOpen) {
            this.toggle();
        }
    }
    /**
     * When mouseHover is enabled and state is open
     * calls toggle to close the actions
     */
    hoverStop() {
        if (this._hover && this._isOpen) {
            this.toggle();
        }
    }
    /**
     * Change the open state
     */
    toggle() {
        this._isOpen = !this._isOpen;
        this._setActionsState();
        this.openStateChange.emit(this._isOpen);
    }
};
tslib_1.__decorate([
    ContentChild(MccSpeedDialActionsComponent, { static: false }),
    tslib_1.__metadata("design:type", MccSpeedDialActionsComponent)
], MccSpeedDialComponent.prototype, "actions", void 0);
tslib_1.__decorate([
    Input('open'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccSpeedDialComponent.prototype, "isOpen", null);
tslib_1.__decorate([
    Input('mouseHover'),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccSpeedDialComponent.prototype, "hover", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Boolean),
    tslib_1.__metadata("design:paramtypes", [Boolean])
], MccSpeedDialComponent.prototype, "spin", null);
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", String),
    tslib_1.__metadata("design:paramtypes", [String])
], MccSpeedDialComponent.prototype, "direction", null);
tslib_1.__decorate([
    Output(),
    tslib_1.__metadata("design:type", EventEmitter)
], MccSpeedDialComponent.prototype, "openStateChange", void 0);
MccSpeedDialComponent = tslib_1.__decorate([
    Component({
        selector: 'mcc-speed-dial',
        template: "<div class=\"mcc-speed-dial-container\" [ngClass]=\"'mcc-speed-dial-direction-' + direction\">\n  <button mat-fab [@spin]=\"spin && isOpen ? 'open' : 'closed'\" class=\"mat-elevation-z1\" (mouseenter)=\"hoverStart()\"\n    (mouseleave)=\"hoverStop()\" (click)=\"toggle()\">\n    <ng-content></ng-content>\n  </button>\n\n  <ng-content select=\"mcc-speed-dial-actions\"></ng-content>\n</div>",
        animations: [SPIN_ANIMATION],
        styles: [".mcc-speed-dial-container{position:relative;display:flex;align-items:center;z-index:20}.mcc-speed-dial-container button{pointer-events:auto;z-index:24}.mcc-speed-dial-container ::ng-deep mcc-speed-dial-actions{display:flex;height:auto}.mcc-speed-dial-container.mcc-speed-dial-direction-up{flex-direction:column}.mcc-speed-dial-container.mcc-speed-dial-direction-up button{order:2}.mcc-speed-dial-container.mcc-speed-dial-direction-up ::ng-deep mcc-speed-dial-actions{flex-direction:column-reverse;order:1}.mcc-speed-dial-container.mcc-speed-dial-direction-up ::ng-deep mcc-speed-dial-actions .mat-mini-fab{margin-bottom:10px}.mcc-speed-dial-container.mcc-speed-dial-direction-down{flex-direction:column}.mcc-speed-dial-container.mcc-speed-dial-direction-down button{order:1}.mcc-speed-dial-container.mcc-speed-dial-direction-down ::ng-deep mcc-speed-dial-actions{flex-direction:column;order:2}.mcc-speed-dial-container.mcc-speed-dial-direction-down ::ng-deep mcc-speed-dial-actions .mat-mini-fab{margin-top:10px}.mcc-speed-dial-container.mcc-speed-dial-direction-left{flex-direction:row}.mcc-speed-dial-container.mcc-speed-dial-direction-left button{order:2}.mcc-speed-dial-container.mcc-speed-dial-direction-left ::ng-deep mcc-speed-dial-actions{flex-direction:row-reverse;order:1}.mcc-speed-dial-container.mcc-speed-dial-direction-left ::ng-deep mcc-speed-dial-actions .mat-mini-fab{margin-right:10px}.mcc-speed-dial-container.mcc-speed-dial-direction-right{flex-direction:row}.mcc-speed-dial-container.mcc-speed-dial-direction-right button{order:1}.mcc-speed-dial-container.mcc-speed-dial-direction-right ::ng-deep mcc-speed-dial-actions{flex-direction:row;order:2}.mcc-speed-dial-container.mcc-speed-dial-direction-right ::ng-deep mcc-speed-dial-actions .mat-mini-fab{margin-left:10px}"]
    }),
    tslib_1.__metadata("design:paramtypes", [])
], MccSpeedDialComponent);
export { MccSpeedDialComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtZGlhbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9tYXRlcmlhbC1jb21tdW5pdHktY29tcG9uZW50cy8iLCJzb3VyY2VzIjpbInNwZWVkLWRpYWwvc3BlZWQtZGlhbC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzlELE9BQU8sRUFBaUIsU0FBUyxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFhLE1BQU0sRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDOUgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUU5QyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQVE5RSxJQUFhLHFCQUFxQixHQUFsQyxNQUFhLHFCQUFxQjtJQXFEaEM7UUF0Q1EsWUFBTyxHQUFZLEtBQUssQ0FBQztRQVF6QixXQUFNLEdBQVksS0FBSyxDQUFDO1FBV3hCLFVBQUssR0FBWSxJQUFJLENBQUM7UUFZdEIsZUFBVSxHQUFjLElBQUksQ0FBQztRQUVyQzs7V0FFRztRQUNPLG9CQUFlLEdBQTBCLElBQUksWUFBWSxFQUFXLENBQUM7SUFFL0QsQ0FBQztJQS9DakI7O09BRUc7SUFDWSxJQUFJLE1BQU0sQ0FBQyxJQUFhO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUNELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDO0lBR0Q7O09BRUc7SUFDa0IsSUFBSSxLQUFLLENBQUMsS0FBYztRQUMzQyxJQUFJLENBQUMsTUFBTSxHQUFHLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFHRDs7T0FFRztJQUNNLElBQUksSUFBSSxDQUFDLElBQWE7UUFDN0IsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUNELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQztJQUNwQixDQUFDO0lBR0Q7OztPQUdHO0lBQ00sSUFBSSxTQUFTLENBQUMsU0FBb0I7UUFDekMsSUFBSSxDQUFDLFVBQVUsR0FBRyxTQUFTLENBQUM7SUFDOUIsQ0FBQztJQUNELElBQUksU0FBUztRQUNYLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQztJQUN6QixDQUFDO0lBVUQ7OztPQUdHO0lBQ0ssZ0JBQWdCO1FBQ3RCLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUNoQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDcEM7YUFBTTtZQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUNwQztJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWU7UUFDYixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztJQUMxQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxRQUFRLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxhQUFhLEtBQUssU0FBUyxFQUFFO1lBQ3hFLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILFVBQVU7UUFDUixJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2hDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUNmO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILFNBQVM7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTtZQUMvQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU07UUFDSixJQUFJLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztRQUU3QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUV4QixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUMsQ0FBQztDQUNGLENBQUE7QUE3R2dFO0lBQTlELFlBQVksQ0FBQyw0QkFBNEIsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQztzQ0FBVSw0QkFBNEI7c0RBQUM7QUFLdEY7SUFBZCxLQUFLLENBQUMsTUFBTSxDQUFDOzs7bURBRWI7QUFTb0I7SUFBcEIsS0FBSyxDQUFDLFlBQVksQ0FBQzs7O2tEQUVuQjtBQU1RO0lBQVIsS0FBSyxFQUFFOzs7aURBRVA7QUFVUTtJQUFSLEtBQUssRUFBRTs7O3NEQUVQO0FBU1M7SUFBVCxNQUFNLEVBQUU7c0NBQWtCLFlBQVk7OERBQXdDO0FBbkRwRSxxQkFBcUI7SUFOakMsU0FBUyxDQUFDO1FBQ1QsUUFBUSxFQUFFLGdCQUFnQjtRQUMxQixrWkFBMEM7UUFFMUMsVUFBVSxFQUFFLENBQUMsY0FBYyxDQUFDOztLQUM3QixDQUFDOztHQUNXLHFCQUFxQixDQWlIakM7U0FqSFkscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29lcmNlQm9vbGVhblByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgQ29udGVudENoaWxkLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU1BJTl9BTklNQVRJT04gfSBmcm9tICcuL2FuaW1hdGlvbnMnO1xuaW1wb3J0IHsgRElSRUNUSU9OIH0gZnJvbSAnLi9kaXJlY3Rpb25zJztcbmltcG9ydCB7IE1jY1NwZWVkRGlhbEFjdGlvbnNDb21wb25lbnQgfSBmcm9tICcuL3NwZWVkLWRpYWwtYWN0aW9ucy5jb21wb25lbnQnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdtY2Mtc3BlZWQtZGlhbCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9zcGVlZC1kaWFsLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vc3BlZWQtZGlhbC5jb21wb25lbnQuc2NzcyddLFxuICBhbmltYXRpb25zOiBbU1BJTl9BTklNQVRJT05dLFxufSlcbmV4cG9ydCBjbGFzcyBNY2NTcGVlZERpYWxDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xuICAvKipcbiAgICogSG9sZCBzcGVlZC1kaWFsLWFjdGlvbnMgY29tcG9uZW50IGluc2lkZSB0aGlzIGNvbXBvbmVudFxuICAgKi9cbiAgQENvbnRlbnRDaGlsZChNY2NTcGVlZERpYWxBY3Rpb25zQ29tcG9uZW50LCB7IHN0YXRpYzogZmFsc2UgfSkgYWN0aW9uczogTWNjU3BlZWREaWFsQWN0aW9uc0NvbXBvbmVudDtcblxuICAvKipcbiAgICogU2V0IGluaXRpYWwgJ29wZW4nIHN0YXRlXG4gICAqL1xuICBASW5wdXQoJ29wZW4nKSBzZXQgaXNPcGVuKG9wZW46IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9pc09wZW4gPSBjb2VyY2VCb29sZWFuUHJvcGVydHkob3Blbik7XG4gIH1cbiAgZ2V0IGlzT3BlbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5faXNPcGVuO1xuICB9XG4gIHByaXZhdGUgX2lzT3BlbjogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBXaGVuIGVuYWJsZWQsIGhhbmRsZSBvcGVuL2Nsb3NlIHN0YXRlIG9uIG1vdXNlIGhvdmVyXG4gICAqL1xuICBASW5wdXQoJ21vdXNlSG92ZXInKSBzZXQgaG92ZXIoaG92ZXI6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9ob3ZlciA9IGNvZXJjZUJvb2xlYW5Qcm9wZXJ0eShob3Zlcik7XG4gIH1cbiAgcHJpdmF0ZSBfaG92ZXI6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAvKipcbiAgICogRW5hYmxlL2Rpc2FibGUgc3BpbiBhbmltYXRpb24gd2hlbiBidXR0b24gaXMgY2xpY2tlZCBvciBob3ZlcmVkXG4gICAqL1xuICBASW5wdXQoKSBzZXQgc3BpbihzcGluOiBib29sZWFuKSB7XG4gICAgdGhpcy5fc3BpbiA9IHNwaW47XG4gIH1cbiAgZ2V0IHNwaW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NwaW47XG4gIH1cbiAgcHJpdmF0ZSBfc3BpbjogYm9vbGVhbiA9IHRydWU7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgZGlyZWN0aW9uIG9mIHRoZSBhY3Rpb25zIGJ1dHRvblxuICAgKiBEaXJlY3Rpb25zIGF2YWlsYWJsZSBhcmU6IHVwIHwgZG93biB8IGxlZnQgfCByaWdodFxuICAgKi9cbiAgQElucHV0KCkgc2V0IGRpcmVjdGlvbihkaXJlY3Rpb246IERJUkVDVElPTikge1xuICAgIHRoaXMuX2RpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgfVxuICBnZXQgZGlyZWN0aW9uKCk6IERJUkVDVElPTiB7XG4gICAgcmV0dXJuIHRoaXMuX2RpcmVjdGlvbjtcbiAgfVxuICBwcml2YXRlIF9kaXJlY3Rpb246IERJUkVDVElPTiA9ICd1cCc7XG5cbiAgLyoqXG4gICAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBvcGVuIHN0YXRlIGNoYW5nZVxuICAgKi9cbiAgQE91dHB1dCgpIG9wZW5TdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGJvb2xlYW4+ID0gbmV3IEV2ZW50RW1pdHRlcjxib29sZWFuPigpO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgLyoqXG4gICAqIENhbGwgZmFiIHNwZWVkIGRpYWwgYWN0aW9ucyBmdW5jdGlvbnMgdG8gY2hhbmdlIHRoZVxuICAgKiB2aXNpYmlsaXR5IG9mIHRoZSBidXR0b25zXG4gICAqL1xuICBwcml2YXRlIF9zZXRBY3Rpb25zU3RhdGUoKSB7XG4gICAgaWYgKHRoaXMuX2lzT3Blbikge1xuICAgICAgdGhpcy5hY3Rpb25zLnNob3codGhpcy5fZGlyZWN0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hY3Rpb25zLmhpZGUodGhpcy5fZGlyZWN0aW9uKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IGluaXRpYWwgc3RhdGUgdG8gdGhlIGFjdGlvbiBidXR0b25zIGluc2lkZSBzcGVlZC1kaWFsLWFjdGlvbnNcbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLl9zZXRBY3Rpb25zU3RhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcbiAgICovXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICBpZiAoJ2lzT3BlbicgaW4gY2hhbmdlcyAmJiBjaGFuZ2VzWydpc09wZW4nXS5wcmV2aW91c1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuX3NldEFjdGlvbnNTdGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIG1vdXNlSG92ZXIgaXMgZW5hYmxlZCBhbmQgc3RhdGUgaXMgY2xvc2VkXG4gICAqIGNhbGxzIHRvZ2dsZSB0byBvcGVuIHRoZSBhY3Rpb25zXG4gICAqL1xuICBob3ZlclN0YXJ0KCkge1xuICAgIGlmICh0aGlzLl9ob3ZlciAmJiAhdGhpcy5faXNPcGVuKSB7XG4gICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXaGVuIG1vdXNlSG92ZXIgaXMgZW5hYmxlZCBhbmQgc3RhdGUgaXMgb3BlblxuICAgKiBjYWxscyB0b2dnbGUgdG8gY2xvc2UgdGhlIGFjdGlvbnNcbiAgICovXG4gIGhvdmVyU3RvcCgpIHtcbiAgICBpZiAodGhpcy5faG92ZXIgJiYgdGhpcy5faXNPcGVuKSB7XG4gICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGFuZ2UgdGhlIG9wZW4gc3RhdGVcbiAgICovXG4gIHRvZ2dsZSgpIHtcbiAgICB0aGlzLl9pc09wZW4gPSAhdGhpcy5faXNPcGVuO1xuXG4gICAgdGhpcy5fc2V0QWN0aW9uc1N0YXRlKCk7XG5cbiAgICB0aGlzLm9wZW5TdGF0ZUNoYW5nZS5lbWl0KHRoaXMuX2lzT3Blbik7XG4gIH1cbn1cbiJdfQ==